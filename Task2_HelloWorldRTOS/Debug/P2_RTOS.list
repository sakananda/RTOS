
P2_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006150  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006260  08006260  00007260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a0  080064a0  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  080064a0  080064a0  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064a0  080064a0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064a4  080064a4  000074a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080064a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e64  20000060  08006508  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ec4  08006508  00008ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001539f  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338b  00000000  00000000  0001d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  000207b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f25  00000000  00000000  00021b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000363a  00000000  00000000  00022a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001493a  00000000  00000000  000260d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008060e  00000000  00000000  0003aa11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb01f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005758  00000000  00000000  000bb064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c07bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006248 	.word	0x08006248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006248 	.word	0x08006248

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fca4 	bl	8000aa0 <HAL_Init>

	  // initialise
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f856 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f918 	bl	8000390 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8ae 	bl	80002c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8ea 	bl	800033c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_Delay(2000);
 8000168:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800016c:	f000 fcca 	bl	8000b04 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f002 fe24 	bl	8002dbc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000174:	4a15      	ldr	r2, [pc, #84]	@ (80001cc <main+0x7c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4815      	ldr	r0, [pc, #84]	@ (80001d0 <main+0x80>)
 800017a:	f002 fe85 	bl	8002e88 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a14      	ldr	r2, [pc, #80]	@ (80001d4 <main+0x84>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 8000184:	4a14      	ldr	r2, [pc, #80]	@ (80001d8 <main+0x88>)
 8000186:	2100      	movs	r1, #0
 8000188:	4814      	ldr	r0, [pc, #80]	@ (80001dc <main+0x8c>)
 800018a:	f002 fe7d 	bl	8002e88 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a13      	ldr	r2, [pc, #76]	@ (80001e0 <main+0x90>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADC, NULL, &getADCTask_attributes);
 8000194:	4a13      	ldr	r2, [pc, #76]	@ (80001e4 <main+0x94>)
 8000196:	2100      	movs	r1, #0
 8000198:	4813      	ldr	r0, [pc, #76]	@ (80001e8 <main+0x98>)
 800019a:	f002 fe75 	bl	8002e88 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a12      	ldr	r2, [pc, #72]	@ (80001ec <main+0x9c>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of dispLEDTask */
  dispLEDTaskHandle = osThreadNew(dispLED, NULL, &dispLEDTask_attributes);
 80001a4:	4a12      	ldr	r2, [pc, #72]	@ (80001f0 <main+0xa0>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	4812      	ldr	r0, [pc, #72]	@ (80001f4 <main+0xa4>)
 80001aa:	f002 fe6d 	bl	8002e88 <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a11      	ldr	r2, [pc, #68]	@ (80001f8 <main+0xa8>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 80001b4:	4a11      	ldr	r2, [pc, #68]	@ (80001fc <main+0xac>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4811      	ldr	r0, [pc, #68]	@ (8000200 <main+0xb0>)
 80001ba:	f002 fe65 	bl	8002e88 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a10      	ldr	r2, [pc, #64]	@ (8000204 <main+0xb4>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f002 fe2c 	bl	8002e20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	bf00      	nop
 80001ca:	e7fd      	b.n	80001c8 <main+0x78>
 80001cc:	080063a0 	.word	0x080063a0
 80001d0:	080004b5 	.word	0x080004b5
 80001d4:	200000ec 	.word	0x200000ec
 80001d8:	080063c4 	.word	0x080063c4
 80001dc:	080004c5 	.word	0x080004c5
 80001e0:	200000f0 	.word	0x200000f0
 80001e4:	080063e8 	.word	0x080063e8
 80001e8:	080004fd 	.word	0x080004fd
 80001ec:	200000f4 	.word	0x200000f4
 80001f0:	0800640c 	.word	0x0800640c
 80001f4:	08000539 	.word	0x08000539
 80001f8:	200000f8 	.word	0x200000f8
 80001fc:	08006430 	.word	0x08006430
 8000200:	080005d5 	.word	0x080005d5
 8000204:	200000fc 	.word	0x200000fc

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b094      	sub	sp, #80	@ 0x50
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f005 fb30 	bl	800587c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000252:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fb44 	bl	80018ec <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026a:	f000 fa21 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fdb0 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000296:	f000 fa0b 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800029a:	2302      	movs	r3, #2
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800029e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 ff6a 	bl	8002180 <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002b2:	f000 f9fd 	bl	80006b0 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3750      	adds	r7, #80	@ 0x50
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d0:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002d2:	4a19      	ldr	r2, [pc, #100]	@ (8000338 <MX_ADC1_Init+0x78>)
 80002d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d6:	4b17      	ldr	r3, [pc, #92]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002dc:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e2:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002ea:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002fe:	f000 fc25 	bl	8000b4c <HAL_ADC_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 f9d2 	bl	80006b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800030c:	2303      	movs	r3, #3
 800030e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000310:	2301      	movs	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4805      	ldr	r0, [pc, #20]	@ (8000334 <MX_ADC1_Init+0x74>)
 800031e:	f000 fecd 	bl	80010bc <HAL_ADC_ConfigChannel>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000328:	f000 f9c2 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000007c 	.word	0x2000007c
 8000338:	40012400 	.word	0x40012400

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f002 fa72 	bl	800285c <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f997 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000ac 	.word	0x200000ac
 800038c:	40013800 	.word	0x40013800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	4b34      	ldr	r3, [pc, #208]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a33      	ldr	r2, [pc, #204]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b31      	ldr	r3, [pc, #196]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0310 	and.w	r3, r3, #16
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b28      	ldr	r3, [pc, #160]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a27      	ldr	r2, [pc, #156]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b25      	ldr	r3, [pc, #148]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b22      	ldr	r3, [pc, #136]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a21      	ldr	r2, [pc, #132]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000478 <MX_GPIO_Init+0xe8>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040a:	481c      	ldr	r0, [pc, #112]	@ (800047c <MX_GPIO_Init+0xec>)
 800040c:	f001 fa55 	bl	80018ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2103      	movs	r1, #3
 8000414:	481a      	ldr	r0, [pc, #104]	@ (8000480 <MX_GPIO_Init+0xf0>)
 8000416:	f001 fa50 	bl	80018ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 800041a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2302      	movs	r3, #2
 800042a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4812      	ldr	r0, [pc, #72]	@ (800047c <MX_GPIO_Init+0xec>)
 8000434:	f001 f8a6 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000438:	2303      	movs	r3, #3
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	480c      	ldr	r0, [pc, #48]	@ (8000480 <MX_GPIO_Init+0xf0>)
 8000450:	f001 f898 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000454:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800045e:	2301      	movs	r3, #1
 8000460:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	4805      	ldr	r0, [pc, #20]	@ (8000480 <MX_GPIO_Init+0xf0>)
 800046a:	f001 f88b 	bl	8001584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800046e:	bf00      	nop
 8000470:	3720      	adds	r7, #32
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40011000 	.word	0x40011000
 8000480:	40010c00 	.word	0x40010c00

08000484 <Menu_Display>:

/* USER CODE BEGIN 4 */


void Menu_Display(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09c      	sub	sp, #112	@ 0x70
 8000488:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Menu_Display */
    char menu[] = "\r\n===== MENU UTAMA =====\r\n"
 800048a:	4a08      	ldr	r2, [pc, #32]	@ (80004ac <Menu_Display+0x28>)
 800048c:	463b      	mov	r3, r7
 800048e:	4611      	mov	r1, r2
 8000490:	226f      	movs	r2, #111	@ 0x6f
 8000492:	4618      	mov	r0, r3
 8000494:	f005 fa7c 	bl	8005990 <memcpy>
                  "1. Matikan Semua LED\r\n"
                  "2. Kondisi LED semula\r\n"
    			  "3. Re-Display\r\n"
                  "======================\r\n";

    HAL_UART_Transmit(&huart1, (uint8_t*)menu, sizeof(menu), 10);
 8000498:	4639      	mov	r1, r7
 800049a:	230a      	movs	r3, #10
 800049c:	226f      	movs	r2, #111	@ 0x6f
 800049e:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <Menu_Display+0x2c>)
 80004a0:	f002 fa29 	bl	80028f6 <HAL_UART_Transmit>
    /* USER CODE END Menu_Display */
}
 80004a4:	bf00      	nop
 80004a6:	3770      	adds	r7, #112	@ 0x70
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	080062a4 	.word	0x080062a4
 80004b0:	200000ac 	.word	0x200000ac

080004b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f002 fd8d 	bl	8002fdc <osDelay>
 80004c2:	e7fb      	b.n	80004bc <StartDefaultTask+0x8>

080004c4 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 80004cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d0:	4808      	ldr	r0, [pc, #32]	@ (80004f4 <pickButton+0x30>)
 80004d2:	f001 f9db 	bl	800188c <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d106      	bne.n	80004ea <pickButton+0x26>
	  {
		  osDelay(300);	// debounce
 80004dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80004e0:	f002 fd7c 	bl	8002fdc <osDelay>
		  button1_pressed = 1;
 80004e4:	4b04      	ldr	r3, [pc, #16]	@ (80004f8 <pickButton+0x34>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
	  }


    osDelay(100);
 80004ea:	2064      	movs	r0, #100	@ 0x64
 80004ec:	f002 fd76 	bl	8002fdc <osDelay>
	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 80004f0:	e7ec      	b.n	80004cc <pickButton+0x8>
 80004f2:	bf00      	nop
 80004f4:	40010c00 	.word	0x40010c00
 80004f8:	2000013c 	.word	0x2000013c

080004fc <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void *argument)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
  for(;;)
  {

	  HAL_ADC_Start(&hadc1);
 8000504:	480a      	ldr	r0, [pc, #40]	@ (8000530 <getADC+0x34>)
 8000506:	f000 fbf9 	bl	8000cfc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800050a:	210a      	movs	r1, #10
 800050c:	4808      	ldr	r0, [pc, #32]	@ (8000530 <getADC+0x34>)
 800050e:	f000 fccf 	bl	8000eb0 <HAL_ADC_PollForConversion>
	  x_val = (HAL_ADC_GetValue(&hadc1));
 8000512:	4807      	ldr	r0, [pc, #28]	@ (8000530 <getADC+0x34>)
 8000514:	f000 fdc6 	bl	80010a4 <HAL_ADC_GetValue>
 8000518:	4603      	mov	r3, r0
 800051a:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <getADC+0x38>)
 800051c:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 800051e:	4804      	ldr	r0, [pc, #16]	@ (8000530 <getADC+0x34>)
 8000520:	f000 fc9a 	bl	8000e58 <HAL_ADC_Stop>

	  // process ADC values here


    osDelay(100);
 8000524:	2064      	movs	r0, #100	@ 0x64
 8000526:	f002 fd59 	bl	8002fdc <osDelay>
	  HAL_ADC_Start(&hadc1);
 800052a:	bf00      	nop
 800052c:	e7ea      	b.n	8000504 <getADC+0x8>
 800052e:	bf00      	nop
 8000530:	2000007c 	.word	0x2000007c
 8000534:	20000100 	.word	0x20000100

08000538 <dispLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispLED */
void dispLED(void *argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispLED */
  /* Infinite loop */
  for(;;)
  {
      if (override_led_control == 1) {
 8000540:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <dispLED+0x90>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10a      	bne.n	800055e <dispLED+0x26>
          // Matikan semua LED jika override aktif
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2101      	movs	r1, #1
 800054c:	481f      	ldr	r0, [pc, #124]	@ (80005cc <dispLED+0x94>)
 800054e:	f001 f9b4 	bl	80018ba <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2102      	movs	r1, #2
 8000556:	481d      	ldr	r0, [pc, #116]	@ (80005cc <dispLED+0x94>)
 8000558:	f001 f9af 	bl	80018ba <HAL_GPIO_WritePin>
 800055c:	e02f      	b.n	80005be <dispLED+0x86>
      } else {
          // Kontrol LED berdasarkan nilai ADC
          if(x_val >= 3500){
 800055e:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <dispLED+0x98>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8000566:	4293      	cmp	r3, r2
 8000568:	d90a      	bls.n	8000580 <dispLED+0x48>
              HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2101      	movs	r1, #1
 800056e:	4817      	ldr	r0, [pc, #92]	@ (80005cc <dispLED+0x94>)
 8000570:	f001 f9a3 	bl	80018ba <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	4814      	ldr	r0, [pc, #80]	@ (80005cc <dispLED+0x94>)
 800057a:	f001 f99e 	bl	80018ba <HAL_GPIO_WritePin>
 800057e:	e01e      	b.n	80005be <dispLED+0x86>
          } else if(x_val >= 2000){
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <dispLED+0x98>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000588:	d30a      	bcc.n	80005a0 <dispLED+0x68>
              HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2101      	movs	r1, #1
 800058e:	480f      	ldr	r0, [pc, #60]	@ (80005cc <dispLED+0x94>)
 8000590:	f001 f993 	bl	80018ba <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2102      	movs	r1, #2
 8000598:	480c      	ldr	r0, [pc, #48]	@ (80005cc <dispLED+0x94>)
 800059a:	f001 f98e 	bl	80018ba <HAL_GPIO_WritePin>
 800059e:	e00e      	b.n	80005be <dispLED+0x86>
          } else if(x_val < 2000){
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <dispLED+0x98>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005a8:	d209      	bcs.n	80005be <dispLED+0x86>
              HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2101      	movs	r1, #1
 80005ae:	4807      	ldr	r0, [pc, #28]	@ (80005cc <dispLED+0x94>)
 80005b0:	f001 f983 	bl	80018ba <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2102      	movs	r1, #2
 80005b8:	4804      	ldr	r0, [pc, #16]	@ (80005cc <dispLED+0x94>)
 80005ba:	f001 f97e 	bl	80018ba <HAL_GPIO_WritePin>
          }
      }

      osDelay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f002 fd0c 	bl	8002fdc <osDelay>
      if (override_led_control == 1) {
 80005c4:	e7bc      	b.n	8000540 <dispLED+0x8>
 80005c6:	bf00      	nop
 80005c8:	20000140 	.word	0x20000140
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	20000100 	.word	0x20000100

080005d4 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispUART */
  Menu_Display();
 80005dc:	f7ff ff52 	bl	8000484 <Menu_Display>
  for(;;)
  {
      // Pilih input dari user
      if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 80005e0:	230a      	movs	r3, #10
 80005e2:	2201      	movs	r2, #1
 80005e4:	4920      	ldr	r1, [pc, #128]	@ (8000668 <dispUART+0x94>)
 80005e6:	4821      	ldr	r0, [pc, #132]	@ (800066c <dispUART+0x98>)
 80005e8:	f002 fa1e 	bl	8002a28 <HAL_UART_Receive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d122      	bne.n	8000638 <dispUART+0x64>
      {
          switch (choice) {
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <dispUART+0x94>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b33      	cmp	r3, #51	@ 0x33
 80005f8:	d01a      	beq.n	8000630 <dispUART+0x5c>
 80005fa:	2b33      	cmp	r3, #51	@ 0x33
 80005fc:	dc1b      	bgt.n	8000636 <dispUART+0x62>
 80005fe:	2b31      	cmp	r3, #49	@ 0x31
 8000600:	d002      	beq.n	8000608 <dispUART+0x34>
 8000602:	2b32      	cmp	r3, #50	@ 0x32
 8000604:	d00a      	beq.n	800061c <dispUART+0x48>
            	  break;
              case '3':
                  Menu_Display();
                  break;
              default:
                  break;
 8000606:	e016      	b.n	8000636 <dispUART+0x62>
                  override_led_control = 1; // Aktifkan override untuk mematikan LED
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <dispUART+0x9c>)
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]
                  HAL_UART_Transmit(&huart1, (uint8_t*)"Semua LED dimatikan\r\n", sizeof("Semua LED dimatikan\r\n"), 10);
 800060e:	230a      	movs	r3, #10
 8000610:	2216      	movs	r2, #22
 8000612:	4918      	ldr	r1, [pc, #96]	@ (8000674 <dispUART+0xa0>)
 8000614:	4815      	ldr	r0, [pc, #84]	@ (800066c <dispUART+0x98>)
 8000616:	f002 f96e 	bl	80028f6 <HAL_UART_Transmit>
                  break;
 800061a:	e00d      	b.n	8000638 <dispUART+0x64>
            	  override_led_control = 0; // Aktifkan override untuk mematikan LED
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <dispUART+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
            	  HAL_UART_Transmit(&huart1, (uint8_t*)"Kondisi LED semula\r\n", sizeof("Kondisi LED semula\r\n"), 10);
 8000622:	230a      	movs	r3, #10
 8000624:	2215      	movs	r2, #21
 8000626:	4914      	ldr	r1, [pc, #80]	@ (8000678 <dispUART+0xa4>)
 8000628:	4810      	ldr	r0, [pc, #64]	@ (800066c <dispUART+0x98>)
 800062a:	f002 f964 	bl	80028f6 <HAL_UART_Transmit>
            	  break;
 800062e:	e003      	b.n	8000638 <dispUART+0x64>
                  Menu_Display();
 8000630:	f7ff ff28 	bl	8000484 <Menu_Display>
                  break;
 8000634:	e000      	b.n	8000638 <dispUART+0x64>
                  break;
 8000636:	bf00      	nop
          }
      }

      // Jika tombol button1 ditekan
      if (button1_pressed) {
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <dispUART+0xa8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00f      	beq.n	8000660 <dispUART+0x8c>
          // Kirimkan nilai ADC ke UART
          sprintf(buffer, "Button1 pressed, ADC Value = %d\r\n", x_val);
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <dispUART+0xac>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	490f      	ldr	r1, [pc, #60]	@ (8000684 <dispUART+0xb0>)
 8000648:	480f      	ldr	r0, [pc, #60]	@ (8000688 <dispUART+0xb4>)
 800064a:	f005 f8f7 	bl	800583c <siprintf>
          HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 800064e:	230a      	movs	r3, #10
 8000650:	2232      	movs	r2, #50	@ 0x32
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <dispUART+0xb4>)
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <dispUART+0x98>)
 8000656:	f002 f94e 	bl	80028f6 <HAL_UART_Transmit>
          button1_pressed = 0;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <dispUART+0xa8>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
      }

      osDelay(100);
 8000660:	2064      	movs	r0, #100	@ 0x64
 8000662:	f002 fcbb 	bl	8002fdc <osDelay>
      if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 8000666:	e7bb      	b.n	80005e0 <dispUART+0xc>
 8000668:	20000104 	.word	0x20000104
 800066c:	200000ac 	.word	0x200000ac
 8000670:	20000140 	.word	0x20000140
 8000674:	08006314 	.word	0x08006314
 8000678:	0800632c 	.word	0x0800632c
 800067c:	2000013c 	.word	0x2000013c
 8000680:	20000100 	.word	0x20000100
 8000684:	08006344 	.word	0x08006344
 8000688:	20000108 	.word	0x20000108

0800068c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800069e:	f000 fa15 	bl	8000acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40000800 	.word	0x40000800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <Error_Handler+0x8>

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <HAL_MspInit+0x68>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a17      	ldr	r2, [pc, #92]	@ (8000724 <HAL_MspInit+0x68>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <HAL_MspInit+0x68>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_MspInit+0x68>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a11      	ldr	r2, [pc, #68]	@ (8000724 <HAL_MspInit+0x68>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <HAL_MspInit+0x68>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	210f      	movs	r1, #15
 80006f6:	f06f 0001 	mvn.w	r0, #1
 80006fa:	f000 ff18 	bl	800152e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <HAL_MspInit+0x6c>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <HAL_MspInit+0x6c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	40010000 	.word	0x40010000

0800072c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <HAL_ADC_MspInit+0x6c>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d121      	bne.n	8000790 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <HAL_ADC_MspInit+0x70>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a12      	ldr	r2, [pc, #72]	@ (800079c <HAL_ADC_MspInit+0x70>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_ADC_MspInit+0x70>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_ADC_MspInit+0x70>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a0c      	ldr	r2, [pc, #48]	@ (800079c <HAL_ADC_MspInit+0x70>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <HAL_ADC_MspInit+0x70>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077c:	2308      	movs	r3, #8
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000780:	2303      	movs	r3, #3
 8000782:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <HAL_ADC_MspInit+0x74>)
 800078c:	f000 fefa 	bl	8001584 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40012400 	.word	0x40012400
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <HAL_UART_MspInit+0x8c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d131      	bne.n	8000828 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <HAL_UART_MspInit+0x90>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000834 <HAL_UART_MspInit+0x90>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <HAL_UART_MspInit+0x90>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <HAL_UART_MspInit+0x90>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <HAL_UART_MspInit+0x90>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_UART_MspInit+0x90>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	@ (8000838 <HAL_UART_MspInit+0x94>)
 800080a:	f000 febb 	bl	8001584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800080e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <HAL_UART_MspInit+0x94>)
 8000824:	f000 feae 	bl	8001584 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40013800 	.word	0x40013800
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800

0800083c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	@ 0x38
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000852:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <HAL_InitTick+0xe8>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a33      	ldr	r2, [pc, #204]	@ (8000924 <HAL_InitTick+0xe8>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <HAL_InitTick+0xe8>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086a:	f107 0210 	add.w	r2, r7, #16
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fc35 	bl	80020e4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800087e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000880:	2b00      	cmp	r3, #0
 8000882:	d103      	bne.n	800088c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000884:	f001 fc06 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8000888:	6378      	str	r0, [r7, #52]	@ 0x34
 800088a:	e004      	b.n	8000896 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800088c:	f001 fc02 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8000890:	4603      	mov	r3, r0
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000898:	4a23      	ldr	r2, [pc, #140]	@ (8000928 <HAL_InitTick+0xec>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	0c9b      	lsrs	r3, r3, #18
 80008a0:	3b01      	subs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <HAL_InitTick+0xf0>)
 80008a6:	4a22      	ldr	r2, [pc, #136]	@ (8000930 <HAL_InitTick+0xf4>)
 80008a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <HAL_InitTick+0xf0>)
 80008ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008b0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <HAL_InitTick+0xf0>)
 80008b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <HAL_InitTick+0xf0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <HAL_InitTick+0xf0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <HAL_InitTick+0xf0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008ca:	4818      	ldr	r0, [pc, #96]	@ (800092c <HAL_InitTick+0xf0>)
 80008cc:	f001 fdce 	bl	800246c <HAL_TIM_Base_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d11b      	bne.n	8000916 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008de:	4813      	ldr	r0, [pc, #76]	@ (800092c <HAL_InitTick+0xf0>)
 80008e0:	f001 fdf8 	bl	80024d4 <HAL_TIM_Base_Start_IT>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d111      	bne.n	8000916 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008f2:	201e      	movs	r0, #30
 80008f4:	f000 fe37 	bl	8001566 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b0f      	cmp	r3, #15
 80008fc:	d808      	bhi.n	8000910 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80008fe:	2200      	movs	r2, #0
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	201e      	movs	r0, #30
 8000904:	f000 fe13 	bl	800152e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000908:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <HAL_InitTick+0xf8>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	e002      	b.n	8000916 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000916:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800091a:	4618      	mov	r0, r3
 800091c:	3738      	adds	r7, #56	@ 0x38
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	431bde83 	.word	0x431bde83
 800092c:	20000144 	.word	0x20000144
 8000930:	40000800 	.word	0x40000800
 8000934:	20000004 	.word	0x20000004

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <NMI_Handler+0x4>

08000940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <UsageFault_Handler+0x4>

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <TIM4_IRQHandler+0x10>)
 8000972:	f001 fdd2 	bl	800251a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000144 	.word	0x20000144

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f004 ffc2 	bl	8005938 <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20005000 	.word	0x20005000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	20000184 	.word	0x20000184
 80009e8:	20001ec8 	.word	0x20001ec8

080009ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <SystemInit+0x5c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <SystemInit+0x5c>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <SystemInit+0x5c>)
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4911      	ldr	r1, [pc, #68]	@ (8000a48 <SystemInit+0x5c>)
 8000a02:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <SystemInit+0x60>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <SystemInit+0x5c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <SystemInit+0x5c>)
 8000a0e:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a16:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <SystemInit+0x5c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <SystemInit+0x5c>)
 8000a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a22:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <SystemInit+0x5c>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <SystemInit+0x5c>)
 8000a2a:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000a2e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <SystemInit+0x5c>)
 8000a32:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8000a36:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <SystemInit+0x64>)
 8000a3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	f8ff0000 	.word	0xf8ff0000
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a70:	f842 3b04 	str.w	r3, [r2], #4

08000a74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a7a:	f7ff ffb7 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f004 ff61 	bl	8005944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a82:	f7ff fb65 	bl	8000150 <main>
  bx lr
 8000a86:	4770      	bx	lr
  ldr r3, =_sidata
 8000a88:	080064a8 	.word	0x080064a8
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a90:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8000a94:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8000a98:	20001ec4 	.word	0x20001ec4

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_Init+0x28>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <HAL_Init+0x28>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 fd31 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	f7ff fec0 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fdfe 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40022000 	.word	0x40022000

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a03      	ldr	r2, [pc, #12]	@ (8000aec <HAL_IncTick+0x20>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000188 	.word	0x20000188

08000af0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	@ (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000188 	.word	0x20000188

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff fff0 	bl	8000af0 <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffe0 	bl	8000af0 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e0be      	b.n	8000cec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d109      	bne.n	8000b90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fdce 	bl	800072c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 fbdd 	bl	8001350 <ADC_ConversionStop_Disable>
 8000b96:	4603      	mov	r3, r0
 8000b98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f040 8099 	bne.w	8000cda <HAL_ADC_Init+0x18e>
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f040 8095 	bne.w	8000cda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bb8:	f023 0302 	bic.w	r3, r3, #2
 8000bbc:	f043 0202 	orr.w	r2, r3, #2
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bcc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7b1b      	ldrb	r3, [r3, #12]
 8000bd2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bd4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000be4:	d003      	beq.n	8000bee <HAL_ADC_Init+0xa2>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d102      	bne.n	8000bf4 <HAL_ADC_Init+0xa8>
 8000bee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf2:	e000      	b.n	8000bf6 <HAL_ADC_Init+0xaa>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7d1b      	ldrb	r3, [r3, #20]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d119      	bne.n	8000c38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7b1b      	ldrb	r3, [r3, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d109      	bne.n	8000c20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	035a      	lsls	r2, r3, #13
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	e00b      	b.n	8000c38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c24:	f043 0220 	orr.w	r2, r3, #32
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c30:	f043 0201 	orr.w	r2, r3, #1
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <HAL_ADC_Init+0x1a8>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c68:	d003      	beq.n	8000c72 <HAL_ADC_Init+0x126>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d104      	bne.n	8000c7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	051b      	lsls	r3, r3, #20
 8000c7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c82:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_ADC_Init+0x1ac>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d10b      	bne.n	8000cb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000caa:	f023 0303 	bic.w	r3, r3, #3
 8000cae:	f043 0201 	orr.w	r2, r3, #1
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb6:	e018      	b.n	8000cea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cbc:	f023 0312 	bic.w	r3, r3, #18
 8000cc0:	f043 0210 	orr.w	r2, r3, #16
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	f043 0201 	orr.w	r2, r3, #1
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd8:	e007      	b.n	8000cea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cde:	f043 0210 	orr.w	r2, r3, #16
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	ffe1f7fd 	.word	0xffe1f7fd
 8000cf8:	ff1f0efe 	.word	0xff1f0efe

08000cfc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d101      	bne.n	8000d16 <HAL_ADC_Start+0x1a>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e098      	b.n	8000e48 <HAL_ADC_Start+0x14c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 fac4 	bl	80012ac <ADC_Enable>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f040 8087 	bne.w	8000e3e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d38:	f023 0301 	bic.w	r3, r3, #1
 8000d3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a41      	ldr	r2, [pc, #260]	@ (8000e50 <HAL_ADC_Start+0x154>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d105      	bne.n	8000d5a <HAL_ADC_Start+0x5e>
 8000d4e:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <HAL_ADC_Start+0x158>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d115      	bne.n	8000d86 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d026      	beq.n	8000dc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d84:	e01d      	b.n	8000dc2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a2f      	ldr	r2, [pc, #188]	@ (8000e54 <HAL_ADC_Start+0x158>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d004      	beq.n	8000da6 <HAL_ADC_Start+0xaa>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e50 <HAL_ADC_Start+0x154>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d10d      	bne.n	8000dc2 <HAL_ADC_Start+0xc6>
 8000da6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e54 <HAL_ADC_Start+0x158>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd2:	f023 0206 	bic.w	r2, r3, #6
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dda:	e002      	b.n	8000de2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f06f 0202 	mvn.w	r2, #2
 8000df2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000dfe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e02:	d113      	bne.n	8000e2c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e08:	4a11      	ldr	r2, [pc, #68]	@ (8000e50 <HAL_ADC_Start+0x154>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d105      	bne.n	8000e1a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <HAL_ADC_Start+0x158>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d108      	bne.n	8000e2c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	e00c      	b.n	8000e46 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	e003      	b.n	8000e46 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40012800 	.word	0x40012800
 8000e54:	40012400 	.word	0x40012400

08000e58 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Stop+0x1a>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e01a      	b.n	8000ea8 <HAL_ADC_Stop+0x50>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fa68 	bl	8001350 <ADC_ConversionStop_Disable>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d109      	bne.n	8000e9e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ec6:	f7ff fe13 	bl	8000af0 <HAL_GetTick>
 8000eca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ede:	f043 0220 	orr.w	r2, r3, #32
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e0c8      	b.n	8001084 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d12a      	bne.n	8000f56 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f06:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d123      	bne.n	8000f56 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f0e:	e01a      	b.n	8000f46 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f16:	d016      	beq.n	8000f46 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <HAL_ADC_PollForConversion+0x7e>
 8000f1e:	f7ff fde7 	bl	8000af0 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d20b      	bcs.n	8000f46 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f32:	f043 0204 	orr.w	r2, r3, #4
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	629a      	str	r2, [r3, #40]	@ 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          
          return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e09e      	b.n	8001084 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0dd      	beq.n	8000f10 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f54:	e06c      	b.n	8001030 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <HAL_ADC_PollForConversion+0x1dc>)
 8000f58:	681c      	ldr	r4, [r3, #0]
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f001 f9c6 	bl	80022ec <HAL_RCCEx_GetPeriphCLKFreq>
 8000f60:	4603      	mov	r3, r0
 8000f62:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6919      	ldr	r1, [r3, #16]
 8000f6c:	4b48      	ldr	r3, [pc, #288]	@ (8001090 <HAL_ADC_PollForConversion+0x1e0>)
 8000f6e:	400b      	ands	r3, r1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d118      	bne.n	8000fa6 <HAL_ADC_PollForConversion+0xf6>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68d9      	ldr	r1, [r3, #12]
 8000f7a:	4b46      	ldr	r3, [pc, #280]	@ (8001094 <HAL_ADC_PollForConversion+0x1e4>)
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d111      	bne.n	8000fa6 <HAL_ADC_PollForConversion+0xf6>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6919      	ldr	r1, [r3, #16]
 8000f88:	4b43      	ldr	r3, [pc, #268]	@ (8001098 <HAL_ADC_PollForConversion+0x1e8>)
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d108      	bne.n	8000fa2 <HAL_ADC_PollForConversion+0xf2>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d9      	ldr	r1, [r3, #12]
 8000f96:	4b41      	ldr	r3, [pc, #260]	@ (800109c <HAL_ADC_PollForConversion+0x1ec>)
 8000f98:	400b      	ands	r3, r1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_PollForConversion+0xf2>
 8000f9e:	2314      	movs	r3, #20
 8000fa0:	e020      	b.n	8000fe4 <HAL_ADC_PollForConversion+0x134>
 8000fa2:	2329      	movs	r3, #41	@ 0x29
 8000fa4:	e01e      	b.n	8000fe4 <HAL_ADC_PollForConversion+0x134>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6919      	ldr	r1, [r3, #16]
 8000fac:	4b3a      	ldr	r3, [pc, #232]	@ (8001098 <HAL_ADC_PollForConversion+0x1e8>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d106      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x112>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68d9      	ldr	r1, [r3, #12]
 8000fba:	4b38      	ldr	r3, [pc, #224]	@ (800109c <HAL_ADC_PollForConversion+0x1ec>)
 8000fbc:	400b      	ands	r3, r1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00d      	beq.n	8000fde <HAL_ADC_PollForConversion+0x12e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6919      	ldr	r1, [r3, #16]
 8000fc8:	4b35      	ldr	r3, [pc, #212]	@ (80010a0 <HAL_ADC_PollForConversion+0x1f0>)
 8000fca:	400b      	ands	r3, r1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d108      	bne.n	8000fe2 <HAL_ADC_PollForConversion+0x132>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68d9      	ldr	r1, [r3, #12]
 8000fd6:	4b32      	ldr	r3, [pc, #200]	@ (80010a0 <HAL_ADC_PollForConversion+0x1f0>)
 8000fd8:	400b      	ands	r3, r1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_PollForConversion+0x132>
 8000fde:	2354      	movs	r3, #84	@ 0x54
 8000fe0:	e000      	b.n	8000fe4 <HAL_ADC_PollForConversion+0x134>
 8000fe2:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fea:	e01d      	b.n	8001028 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff2:	d016      	beq.n	8001022 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <HAL_ADC_PollForConversion+0x15a>
 8000ffa:	f7ff fd79 	bl	8000af0 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d20b      	bcs.n	8001022 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100e:	f043 0204 	orr.w	r2, r3, #4
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	@ 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e030      	b.n	8001084 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8dd      	bhi.n	8000fec <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f06f 0212 	mvn.w	r2, #18
 8001038:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001050:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001054:	d115      	bne.n	8001082 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800105a:	2b00      	cmp	r3, #0
 800105c:	d111      	bne.n	8001082 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001062:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d105      	bne.n	8001082 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	24924924 	.word	0x24924924
 8001094:	00924924 	.word	0x00924924
 8001098:	12492492 	.word	0x12492492
 800109c:	00492492 	.word	0x00492492
 80010a0:	00249249 	.word	0x00249249

080010a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x20>
 80010d8:	2302      	movs	r3, #2
 80010da:	e0dc      	b.n	8001296 <HAL_ADC_ConfigChannel+0x1da>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	d81c      	bhi.n	8001126 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b05      	subs	r3, #5
 80010fe:	221f      	movs	r2, #31
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	4019      	ands	r1, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	3b05      	subs	r3, #5
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34
 8001124:	e03c      	b.n	80011a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b0c      	cmp	r3, #12
 800112c:	d81c      	bhi.n	8001168 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b23      	subs	r3, #35	@ 0x23
 8001140:	221f      	movs	r2, #31
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	4019      	ands	r1, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	3b23      	subs	r3, #35	@ 0x23
 800115a:	fa00 f203 	lsl.w	r2, r0, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	631a      	str	r2, [r3, #48]	@ 0x30
 8001166:	e01b      	b.n	80011a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	3b41      	subs	r3, #65	@ 0x41
 800117a:	221f      	movs	r2, #31
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	4019      	ands	r1, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	3b41      	subs	r3, #65	@ 0x41
 8001194:	fa00 f203 	lsl.w	r2, r0, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b09      	cmp	r3, #9
 80011a6:	d91c      	bls.n	80011e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68d9      	ldr	r1, [r3, #12]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	3b1e      	subs	r3, #30
 80011ba:	2207      	movs	r2, #7
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4019      	ands	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6898      	ldr	r0, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	3b1e      	subs	r3, #30
 80011d4:	fa00 f203 	lsl.w	r2, r0, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	e019      	b.n	8001216 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6919      	ldr	r1, [r3, #16]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	2207      	movs	r2, #7
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4019      	ands	r1, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	6898      	ldr	r0, [r3, #8]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	fa00 f203 	lsl.w	r2, r0, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b10      	cmp	r3, #16
 800121c:	d003      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001222:	2b11      	cmp	r3, #17
 8001224:	d132      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d125      	bne.n	800127c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d126      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800124c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b10      	cmp	r3, #16
 8001254:	d11a      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a13      	ldr	r2, [pc, #76]	@ (80012a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	0c9a      	lsrs	r2, r3, #18
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800126c:	e002      	b.n	8001274 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3b01      	subs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <HAL_ADC_ConfigChannel+0x1b2>
 800127a:	e007      	b.n	800128c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	f043 0220 	orr.w	r2, r3, #32
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40012400 	.word	0x40012400
 80012a4:	20000000 	.word	0x20000000
 80012a8:	431bde83 	.word	0x431bde83

080012ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d039      	beq.n	800133e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0201 	orr.w	r2, r2, #1
 80012d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <ADC_Enable+0x9c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <ADC_Enable+0xa0>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9b      	lsrs	r3, r3, #18
 80012e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012e8:	e002      	b.n	80012f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f9      	bne.n	80012ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012f6:	f7ff fbfb 	bl	8000af0 <HAL_GetTick>
 80012fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012fc:	e018      	b.n	8001330 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012fe:	f7ff fbf7 	bl	8000af0 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d911      	bls.n	8001330 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001310:	f043 0210 	orr.w	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e007      	b.n	8001340 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d1df      	bne.n	80012fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000000 	.word	0x20000000
 800134c:	431bde83 	.word	0x431bde83

08001350 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b01      	cmp	r3, #1
 8001368:	d127      	bne.n	80013ba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800137a:	f7ff fbb9 	bl	8000af0 <HAL_GetTick>
 800137e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001380:	e014      	b.n	80013ac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001382:	f7ff fbb5 	bl	8000af0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d90d      	bls.n	80013ac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	f043 0210 	orr.w	r2, r3, #16
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e007      	b.n	80013bc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d0e3      	beq.n	8001382 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4906      	ldr	r1, [pc, #24]	@ (800145c <__NVIC_EnableIRQ+0x34>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	@ (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff4f 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001540:	f7ff ff64 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7ff ffb2 	bl	80014b4 <NVIC_EncodePriority>
 8001550:	4602      	mov	r2, r0
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff81 	bl	8001460 <__NVIC_SetPriority>
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff57 	bl	8001428 <__NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b08b      	sub	sp, #44	@ 0x2c
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	e169      	b.n	800186c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001598:	2201      	movs	r2, #1
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f040 8158 	bne.w	8001866 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a9a      	ldr	r2, [pc, #616]	@ (8001824 <HAL_GPIO_Init+0x2a0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d05e      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015c0:	4a98      	ldr	r2, [pc, #608]	@ (8001824 <HAL_GPIO_Init+0x2a0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d875      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015c6:	4a98      	ldr	r2, [pc, #608]	@ (8001828 <HAL_GPIO_Init+0x2a4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d058      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015cc:	4a96      	ldr	r2, [pc, #600]	@ (8001828 <HAL_GPIO_Init+0x2a4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d86f      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015d2:	4a96      	ldr	r2, [pc, #600]	@ (800182c <HAL_GPIO_Init+0x2a8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d052      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015d8:	4a94      	ldr	r2, [pc, #592]	@ (800182c <HAL_GPIO_Init+0x2a8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d869      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015de:	4a94      	ldr	r2, [pc, #592]	@ (8001830 <HAL_GPIO_Init+0x2ac>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d04c      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015e4:	4a92      	ldr	r2, [pc, #584]	@ (8001830 <HAL_GPIO_Init+0x2ac>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d863      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015ea:	4a92      	ldr	r2, [pc, #584]	@ (8001834 <HAL_GPIO_Init+0x2b0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d046      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015f0:	4a90      	ldr	r2, [pc, #576]	@ (8001834 <HAL_GPIO_Init+0x2b0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d85d      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d82a      	bhi.n	8001650 <HAL_GPIO_Init+0xcc>
 80015fa:	2b12      	cmp	r3, #18
 80015fc:	d859      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001604 <HAL_GPIO_Init+0x80>)
 8001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001604:	0800167f 	.word	0x0800167f
 8001608:	08001659 	.word	0x08001659
 800160c:	0800166b 	.word	0x0800166b
 8001610:	080016ad 	.word	0x080016ad
 8001614:	080016b3 	.word	0x080016b3
 8001618:	080016b3 	.word	0x080016b3
 800161c:	080016b3 	.word	0x080016b3
 8001620:	080016b3 	.word	0x080016b3
 8001624:	080016b3 	.word	0x080016b3
 8001628:	080016b3 	.word	0x080016b3
 800162c:	080016b3 	.word	0x080016b3
 8001630:	080016b3 	.word	0x080016b3
 8001634:	080016b3 	.word	0x080016b3
 8001638:	080016b3 	.word	0x080016b3
 800163c:	080016b3 	.word	0x080016b3
 8001640:	080016b3 	.word	0x080016b3
 8001644:	080016b3 	.word	0x080016b3
 8001648:	08001661 	.word	0x08001661
 800164c:	08001675 	.word	0x08001675
 8001650:	4a79      	ldr	r2, [pc, #484]	@ (8001838 <HAL_GPIO_Init+0x2b4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001656:	e02c      	b.n	80016b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e029      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	3304      	adds	r3, #4
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e024      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	3308      	adds	r3, #8
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e01f      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	330c      	adds	r3, #12
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e01a      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001686:	2304      	movs	r3, #4
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e013      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	611a      	str	r2, [r3, #16]
          break;
 800169e:	e009      	b.n	80016b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a0:	2308      	movs	r3, #8
 80016a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	615a      	str	r2, [r3, #20]
          break;
 80016aa:	e003      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          break;
 80016b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2bff      	cmp	r3, #255	@ 0xff
 80016b8:	d801      	bhi.n	80016be <HAL_GPIO_Init+0x13a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	e001      	b.n	80016c2 <HAL_GPIO_Init+0x13e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3304      	adds	r3, #4
 80016c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	@ 0xff
 80016c8:	d802      	bhi.n	80016d0 <HAL_GPIO_Init+0x14c>
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x152>
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	3b08      	subs	r3, #8
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	210f      	movs	r1, #15
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	6a39      	ldr	r1, [r7, #32]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80b1 	beq.w	8001866 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001704:	4b4d      	ldr	r3, [pc, #308]	@ (800183c <HAL_GPIO_Init+0x2b8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a4c      	ldr	r2, [pc, #304]	@ (800183c <HAL_GPIO_Init+0x2b8>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b4a      	ldr	r3, [pc, #296]	@ (800183c <HAL_GPIO_Init+0x2b8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800171c:	4a48      	ldr	r2, [pc, #288]	@ (8001840 <HAL_GPIO_Init+0x2bc>)
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001728:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a40      	ldr	r2, [pc, #256]	@ (8001844 <HAL_GPIO_Init+0x2c0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d013      	beq.n	8001770 <HAL_GPIO_Init+0x1ec>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a3f      	ldr	r2, [pc, #252]	@ (8001848 <HAL_GPIO_Init+0x2c4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00d      	beq.n	800176c <HAL_GPIO_Init+0x1e8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a3e      	ldr	r2, [pc, #248]	@ (800184c <HAL_GPIO_Init+0x2c8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d007      	beq.n	8001768 <HAL_GPIO_Init+0x1e4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a3d      	ldr	r2, [pc, #244]	@ (8001850 <HAL_GPIO_Init+0x2cc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d101      	bne.n	8001764 <HAL_GPIO_Init+0x1e0>
 8001760:	2303      	movs	r3, #3
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x1ee>
 8001764:	2304      	movs	r3, #4
 8001766:	e004      	b.n	8001772 <HAL_GPIO_Init+0x1ee>
 8001768:	2302      	movs	r3, #2
 800176a:	e002      	b.n	8001772 <HAL_GPIO_Init+0x1ee>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_GPIO_Init+0x1ee>
 8001770:	2300      	movs	r3, #0
 8001772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001774:	f002 0203 	and.w	r2, r2, #3
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	4093      	lsls	r3, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001782:	492f      	ldr	r1, [pc, #188]	@ (8001840 <HAL_GPIO_Init+0x2bc>)
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	492c      	ldr	r1, [pc, #176]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4928      	ldr	r1, [pc, #160]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4922      	ldr	r1, [pc, #136]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	491e      	ldr	r1, [pc, #120]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4918      	ldr	r1, [pc, #96]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	4914      	ldr	r1, [pc, #80]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 8001804:	4013      	ands	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d021      	beq.n	8001858 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001814:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	490e      	ldr	r1, [pc, #56]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
 8001820:	e021      	b.n	8001866 <HAL_GPIO_Init+0x2e2>
 8001822:	bf00      	nop
 8001824:	10320000 	.word	0x10320000
 8001828:	10310000 	.word	0x10310000
 800182c:	10220000 	.word	0x10220000
 8001830:	10210000 	.word	0x10210000
 8001834:	10120000 	.word	0x10120000
 8001838:	10110000 	.word	0x10110000
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000
 8001844:	40010800 	.word	0x40010800
 8001848:	40010c00 	.word	0x40010c00
 800184c:	40011000 	.word	0x40011000
 8001850:	40011400 	.word	0x40011400
 8001854:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_GPIO_Init+0x304>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	43db      	mvns	r3, r3
 8001860:	4909      	ldr	r1, [pc, #36]	@ (8001888 <HAL_GPIO_Init+0x304>)
 8001862:	4013      	ands	r3, r2
 8001864:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f ae8e 	bne.w	8001598 <HAL_GPIO_Init+0x14>
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	372c      	adds	r7, #44	@ 0x2c
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e001      	b.n	80018ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]
 80018c6:	4613      	mov	r3, r2
 80018c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ca:	787b      	ldrb	r3, [r7, #1]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d0:	887a      	ldrh	r2, [r7, #2]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d6:	e003      	b.n	80018e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	041a      	lsls	r2, r3, #16
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	611a      	str	r2, [r3, #16]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e272      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8087 	beq.w	8001a1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800190c:	4b92      	ldr	r3, [pc, #584]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b04      	cmp	r3, #4
 8001916:	d00c      	beq.n	8001932 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001918:	4b8f      	ldr	r3, [pc, #572]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d112      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
 8001924:	4b8c      	ldr	r3, [pc, #560]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001930:	d10b      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001932:	4b89      	ldr	r3, [pc, #548]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x12c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d168      	bne.n	8001a18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e24c      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x76>
 8001954:	4b80      	ldr	r3, [pc, #512]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7f      	ldr	r2, [pc, #508]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e02e      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x98>
 800196a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7a      	ldr	r2, [pc, #488]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b78      	ldr	r3, [pc, #480]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a77      	ldr	r2, [pc, #476]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0xbc>
 800198e:	4b72      	ldr	r3, [pc, #456]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a71      	ldr	r2, [pc, #452]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 80019a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b68      	ldr	r3, [pc, #416]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a67      	ldr	r2, [pc, #412]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f892 	bl	8000af0 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f88e 	bl	8000af0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	@ 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e200      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xe4>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f87e 	bl	8000af0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff f87a 	bl	8000af0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1ec      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b53      	ldr	r3, [pc, #332]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x10c>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a26:	4b4c      	ldr	r3, [pc, #304]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a32:	4b49      	ldr	r3, [pc, #292]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x18c>
 8001a3e:	4b46      	ldr	r3, [pc, #280]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x176>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e1c0      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4939      	ldr	r1, [pc, #228]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	e03a      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a80:	4b36      	ldr	r3, [pc, #216]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff f833 	bl	8000af0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f82f 	bl	8000af0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e1a1      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4927      	ldr	r1, [pc, #156]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f812 	bl	8000af0 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f80e 	bl	8000af0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e180      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03a      	beq.n	8001b70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d019      	beq.n	8001b36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7fe fff2 	bl	8000af0 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7fe ffee 	bl	8000af0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e160      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f000 fb08 	bl	8002144 <RCC_Delay>
 8001b34:	e01c      	b.n	8001b70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7fe ffd8 	bl	8000af0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b42:	e00f      	b.n	8001b64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7fe ffd4 	bl	8000af0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d908      	bls.n	8001b64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e146      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	42420000 	.word	0x42420000
 8001b60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	4b92      	ldr	r3, [pc, #584]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e9      	bne.n	8001b44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a6 	beq.w	8001cca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b8b      	ldr	r3, [pc, #556]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10d      	bne.n	8001baa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b88      	ldr	r3, [pc, #544]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a87      	ldr	r2, [pc, #540]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b85      	ldr	r3, [pc, #532]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b82      	ldr	r3, [pc, #520]	@ (8001db4 <HAL_RCC_OscConfig+0x4c8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8001db4 <HAL_RCC_OscConfig+0x4c8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7e      	ldr	r2, [pc, #504]	@ (8001db4 <HAL_RCC_OscConfig+0x4c8>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7fe ff95 	bl	8000af0 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7fe ff91 	bl	8000af0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	@ 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e103      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4b75      	ldr	r3, [pc, #468]	@ (8001db4 <HAL_RCC_OscConfig+0x4c8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x312>
 8001bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a6e      	ldr	r2, [pc, #440]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	e02d      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x334>
 8001c06:	4b6a      	ldr	r3, [pc, #424]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a69      	ldr	r2, [pc, #420]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	4b67      	ldr	r3, [pc, #412]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a66      	ldr	r2, [pc, #408]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	e01c      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d10c      	bne.n	8001c42 <HAL_RCC_OscConfig+0x356>
 8001c28:	4b61      	ldr	r3, [pc, #388]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4a60      	ldr	r2, [pc, #384]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	4b5e      	ldr	r3, [pc, #376]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a5d      	ldr	r2, [pc, #372]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e00b      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001c42:	4b5b      	ldr	r3, [pc, #364]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a5a      	ldr	r2, [pc, #360]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a57      	ldr	r2, [pc, #348]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d015      	beq.n	8001c8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7fe ff45 	bl	8000af0 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7fe ff41 	bl	8000af0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0b1      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	4b4b      	ldr	r3, [pc, #300]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ee      	beq.n	8001c6a <HAL_RCC_OscConfig+0x37e>
 8001c8c:	e014      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7fe ff2f 	bl	8000af0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7fe ff2b 	bl	8000af0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e09b      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	4b40      	ldr	r3, [pc, #256]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ee      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8087 	beq.w	8001de2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd4:	4b36      	ldr	r3, [pc, #216]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d061      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d146      	bne.n	8001d76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce8:	4b33      	ldr	r3, [pc, #204]	@ (8001db8 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7fe feff 	bl	8000af0 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe fefb 	bl	8000af0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e06d      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d08:	4b29      	ldr	r3, [pc, #164]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d1c:	d108      	bne.n	8001d30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4921      	ldr	r1, [pc, #132]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d30:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a19      	ldr	r1, [r3, #32]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	430b      	orrs	r3, r1
 8001d42:	491b      	ldr	r1, [pc, #108]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d48:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <HAL_RCC_OscConfig+0x4cc>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fecf 	bl	8000af0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7fe fecb 	bl	8000af0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e03d      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x46a>
 8001d74:	e035      	b.n	8001de2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_RCC_OscConfig+0x4cc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe feb8 	bl	8000af0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe feb4 	bl	8000af0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e026      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x498>
 8001da2:	e01e      	b.n	8001de2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e019      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40007000 	.word	0x40007000
 8001db8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <HAL_RCC_OscConfig+0x500>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d0      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b67      	ldr	r3, [pc, #412]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0207 	bic.w	r2, r3, #7
 8001e1a:	4965      	ldr	r1, [pc, #404]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b63      	ldr	r3, [pc, #396]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b8      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4a58      	ldr	r2, [pc, #352]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a52      	ldr	r2, [pc, #328]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	494d      	ldr	r1, [pc, #308]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d040      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b47      	ldr	r3, [pc, #284]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d115      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b41      	ldr	r3, [pc, #260]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e073      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06b      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b39      	ldr	r3, [pc, #228]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4936      	ldr	r1, [pc, #216]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fe06 	bl	8000af0 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7fe fe02 	bl	8000af0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e053      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d210      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	4922      	ldr	r1, [pc, #136]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4916      	ldr	r1, [pc, #88]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f6a:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	490e      	ldr	r1, [pc, #56]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7e:	f000 f821 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	490a      	ldr	r1, [pc, #40]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <HAL_RCC_ClockConfig+0x1cc>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fc4c 	bl	800083c <HAL_InitTick>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	08006454 	.word	0x08006454
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	b490      	push	{r4, r7}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fca:	4b29      	ldr	r3, [pc, #164]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fcc:	1d3c      	adds	r4, r7, #4
 8001fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fd4:	f240 2301 	movw	r3, #513	@ 0x201
 8001fd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d002      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x40>
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d003      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x46>
 8002002:	e02b      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002006:	623b      	str	r3, [r7, #32]
      break;
 8002008:	e02b      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	0c9b      	lsrs	r3, r3, #18
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3328      	adds	r3, #40	@ 0x28
 8002014:	443b      	add	r3, r7
 8002016:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800201a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	0c5b      	lsrs	r3, r3, #17
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	3328      	adds	r3, #40	@ 0x28
 8002032:	443b      	add	r3, r7
 8002034:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002038:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	4a0e      	ldr	r2, [pc, #56]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xb4>)
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
 800204a:	e004      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	623b      	str	r3, [r7, #32]
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xb4>)
 800205e:	623b      	str	r3, [r7, #32]
      break;
 8002060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002062:	6a3b      	ldr	r3, [r7, #32]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3728      	adds	r7, #40	@ 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc90      	pop	{r4, r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	08006368 	.word	0x08006368
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	003d0900 	.word	0x003d0900

08002080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b02      	ldr	r3, [pc, #8]	@ (8002090 <HAL_RCC_GetHCLKFreq+0x10>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	20000000 	.word	0x20000000

08002094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002098:	f7ff fff2 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4903      	ldr	r1, [pc, #12]	@ (80020b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08006464 	.word	0x08006464

080020bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c0:	f7ff ffde 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0adb      	lsrs	r3, r3, #11
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4903      	ldr	r1, [pc, #12]	@ (80020e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08006464 	.word	0x08006464

080020e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	220f      	movs	r2, #15
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_RCC_GetClockConfig+0x58>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_RCC_GetClockConfig+0x58>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800210c:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_RCC_GetClockConfig+0x58>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_RCC_GetClockConfig+0x58>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_RCC_GetClockConfig+0x5c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0207 	and.w	r2, r3, #7
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000
 8002140:	40022000 	.word	0x40022000

08002144 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800214c:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <RCC_Delay+0x34>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <RCC_Delay+0x38>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0a5b      	lsrs	r3, r3, #9
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002160:	bf00      	nop
  }
  while (Delay --);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e5a      	subs	r2, r3, #1
 8002166:	60fa      	str	r2, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <RCC_Delay+0x1c>
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	20000000 	.word	0x20000000
 800217c:	10624dd3 	.word	0x10624dd3

08002180 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d07d      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a0:	4b4f      	ldr	r3, [pc, #316]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	61d3      	str	r3, [r2, #28]
 80021b8:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b46      	ldr	r3, [pc, #280]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d118      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d4:	4b43      	ldr	r3, [pc, #268]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a42      	ldr	r2, [pc, #264]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e0:	f7fe fc86 	bl	8000af0 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	e008      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e8:	f7fe fc82 	bl	8000af0 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e06d      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b3a      	ldr	r3, [pc, #232]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002206:	4b36      	ldr	r3, [pc, #216]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800220e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d02e      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d027      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002224:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800222c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800222e:	4b2e      	ldr	r3, [pc, #184]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002234:	4b2c      	ldr	r3, [pc, #176]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800223a:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d014      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe fc51 	bl	8000af0 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fc4d 	bl	8000af0 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e036      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002274:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4917      	ldr	r1, [pc, #92]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	4313      	orrs	r3, r2
 8002284:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002286:	7dfb      	ldrb	r3, [r7, #23]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4a13      	ldr	r2, [pc, #76]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002296:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022a4:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	490b      	ldr	r1, [pc, #44]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c2:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4904      	ldr	r1, [pc, #16]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42420440 	.word	0x42420440

080022ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b08d      	sub	sp, #52	@ 0x34
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022f4:	4b58      	ldr	r3, [pc, #352]	@ (8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80022f6:	f107 040c 	add.w	r4, r7, #12
 80022fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002300:	f240 2301 	movw	r3, #513	@ 0x201
 8002304:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b10      	cmp	r3, #16
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b10      	cmp	r3, #16
 8002324:	f200 808e 	bhi.w	8002444 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d049      	beq.n	80023c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d079      	beq.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002334:	e086      	b.n	8002444 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002336:	4b49      	ldr	r3, [pc, #292]	@ (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800233c:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d07f      	beq.n	8002448 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	0c9b      	lsrs	r3, r3, #18
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	3330      	adds	r3, #48	@ 0x30
 8002352:	443b      	add	r3, r7
 8002354:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002358:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d017      	beq.n	8002394 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002364:	4b3d      	ldr	r3, [pc, #244]	@ (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	0c5b      	lsrs	r3, r3, #17
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	3330      	adds	r3, #48	@ 0x30
 8002370:	443b      	add	r3, r7
 8002372:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002382:	4a37      	ldr	r2, [pc, #220]	@ (8002460 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	fbb2 f2f3 	udiv	r2, r2, r3
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002392:	e004      	b.n	800239e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	4a33      	ldr	r2, [pc, #204]	@ (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800239e:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023aa:	d102      	bne.n	80023b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80023ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80023b0:	e04a      	b.n	8002448 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80023b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002468 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80023c0:	e042      	b.n	8002448 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80023c2:	4b26      	ldr	r3, [pc, #152]	@ (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023d2:	d108      	bne.n	80023e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80023de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e4:	e01f      	b.n	8002426 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f0:	d109      	bne.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80023f2:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80023fe:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002402:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002404:	e00f      	b.n	8002426 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800240c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002410:	d11c      	bne.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800241e:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8002424:	e012      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002426:	e011      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002428:	f7ff fe48 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	0b9b      	lsrs	r3, r3, #14
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	3301      	adds	r3, #1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8002442:	e004      	b.n	800244e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002444:	bf00      	nop
 8002446:	e002      	b.n	800244e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002448:	bf00      	nop
 800244a:	e000      	b.n	800244e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800244c:	bf00      	nop
    }
  }
  return (frequency);
 800244e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8002450:	4618      	mov	r0, r3
 8002452:	3734      	adds	r7, #52	@ 0x34
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	08006378 	.word	0x08006378
 800245c:	40021000 	.word	0x40021000
 8002460:	007a1200 	.word	0x007a1200
 8002464:	003d0900 	.word	0x003d0900
 8002468:	aaaaaaab 	.word	0xaaaaaaab

0800246c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e01d      	b.n	80024ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f815 	bl	80024c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3304      	adds	r3, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f000 f962 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d007      	beq.n	800250e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b02      	cmp	r3, #2
 800252e:	d122      	bne.n	8002576 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d11b      	bne.n	8002576 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 0202 	mvn.w	r2, #2
 8002546:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f8ed 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8002562:	e005      	b.n	8002570 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f8e0 	bl	800272a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f8ef 	bl	800274e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d122      	bne.n	80025ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d11b      	bne.n	80025ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f06f 0204 	mvn.w	r2, #4
 800259a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f8c3 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 80025b6:	e005      	b.n	80025c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f8b6 	bl	800272a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8c5 	bl	800274e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d122      	bne.n	800261e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d11b      	bne.n	800261e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f06f 0208 	mvn.w	r2, #8
 80025ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2204      	movs	r2, #4
 80025f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f899 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 800260a:	e005      	b.n	8002618 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f88c 	bl	800272a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f89b 	bl	800274e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b10      	cmp	r3, #16
 800262a:	d122      	bne.n	8002672 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b10      	cmp	r3, #16
 8002638:	d11b      	bne.n	8002672 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f06f 0210 	mvn.w	r2, #16
 8002642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2208      	movs	r2, #8
 8002648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f86f 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 800265e:	e005      	b.n	800266c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f862 	bl	800272a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f871 	bl	800274e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10e      	bne.n	800269e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f06f 0201 	mvn.w	r2, #1
 8002696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fd fff7 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a8:	2b80      	cmp	r3, #128	@ 0x80
 80026aa:	d10e      	bne.n	80026ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b80      	cmp	r3, #128	@ 0x80
 80026b8:	d107      	bne.n	80026ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f8c0 	bl	800284a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	2b40      	cmp	r3, #64	@ 0x40
 80026d6:	d10e      	bne.n	80026f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e2:	2b40      	cmp	r3, #64	@ 0x40
 80026e4:	d107      	bne.n	80026f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f835 	bl	8002760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b20      	cmp	r3, #32
 8002702:	d10e      	bne.n	8002722 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b20      	cmp	r3, #32
 8002710:	d107      	bne.n	8002722 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f06f 0220 	mvn.w	r2, #32
 800271a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f88b 	bl	8002838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a29      	ldr	r2, [pc, #164]	@ (800282c <TIM_Base_SetConfig+0xb8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00b      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002792:	d007      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <TIM_Base_SetConfig+0xbc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a25      	ldr	r2, [pc, #148]	@ (8002834 <TIM_Base_SetConfig+0xc0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <TIM_Base_SetConfig+0xb8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c4:	d007      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <TIM_Base_SetConfig+0xbc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a18      	ldr	r2, [pc, #96]	@ (8002834 <TIM_Base_SetConfig+0xc0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a07      	ldr	r2, [pc, #28]	@ (800282c <TIM_Base_SetConfig+0xb8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d103      	bne.n	800281c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	615a      	str	r2, [r3, #20]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800

08002838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e03f      	b.n	80028ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fd ff8e 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2224      	movs	r2, #36	@ 0x24
 800288c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800289e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f9b1 	bl	8002c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b088      	sub	sp, #32
 80028fa:	af02      	add	r7, sp, #8
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	f040 8083 	bne.w	8002a1e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_UART_Transmit+0x2e>
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e07b      	b.n	8002a20 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_UART_Transmit+0x40>
 8002932:	2302      	movs	r3, #2
 8002934:	e074      	b.n	8002a20 <HAL_UART_Transmit+0x12a>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2221      	movs	r2, #33	@ 0x21
 8002948:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800294c:	f7fe f8d0 	bl	8000af0 <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	88fa      	ldrh	r2, [r7, #6]
 800295c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800295e:	e042      	b.n	80029e6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002976:	d122      	bne.n	80029be <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2200      	movs	r2, #0
 8002980:	2180      	movs	r1, #128	@ 0x80
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8f6 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e046      	b.n	8002a20 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d103      	bne.n	80029b6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3302      	adds	r3, #2
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	e017      	b.n	80029e6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	e013      	b.n	80029e6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2180      	movs	r1, #128	@ 0x80
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f8d3 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e023      	b.n	8002a20 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	60ba      	str	r2, [r7, #8]
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1b7      	bne.n	8002960 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2200      	movs	r2, #0
 80029f8:	2140      	movs	r1, #64	@ 0x40
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f8ba 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e00a      	b.n	8002a20 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	f040 8090 	bne.w	8002b6a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_UART_Receive+0x2e>
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e088      	b.n	8002b6c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Receive+0x40>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e081      	b.n	8002b6c <HAL_UART_Receive+0x144>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2222      	movs	r2, #34	@ 0x22
 8002a7a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe f837 	bl	8000af0 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a90:	e05c      	b.n	8002b4c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa8:	d12b      	bne.n	8002b02 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f85d 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e053      	b.n	8002b6c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10c      	bne.n	8002aea <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	e030      	b.n	8002b4c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3301      	adds	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	e024      	b.n	8002b4c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2120      	movs	r1, #32
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f831 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e027      	b.n	8002b6c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d108      	bne.n	8002b36 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	60ba      	str	r2, [r7, #8]
 8002b30:	b2ca      	uxtb	r2, r1
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e00a      	b.n	8002b4c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1c59      	adds	r1, r3, #1
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d19d      	bne.n	8002a92 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b84:	e02c      	b.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d028      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b94:	f7fd ffac 	bl	8000af0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d21d      	bcs.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8002bb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e00f      	b.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4013      	ands	r3, r2
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d0c3      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c42:	f023 030c 	bic.w	r3, r3, #12
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a52      	ldr	r2, [pc, #328]	@ (8002db4 <UART_SetConfig+0x1ac>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d14e      	bne.n	8002d0e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c70:	f7ff fa24 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8002c74:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009a      	lsls	r2, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	0119      	lsls	r1, r3, #4
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cac:	4b42      	ldr	r3, [pc, #264]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002cae:	fba3 0302 	umull	r0, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2064      	movs	r0, #100	@ 0x64
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	3332      	adds	r3, #50	@ 0x32
 8002cc0:	4a3d      	ldr	r2, [pc, #244]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ccc:	4419      	add	r1, r3
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce4:	4b34      	ldr	r3, [pc, #208]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2064      	movs	r0, #100	@ 0x64
 8002cee:	fb00 f303 	mul.w	r3, r0, r3
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	3332      	adds	r3, #50	@ 0x32
 8002cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	440a      	add	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002d0c:	e04d      	b.n	8002daa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d0e:	f7ff f9c1 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8002d12:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009a      	lsls	r2, r3, #2
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	0119      	lsls	r1, r3, #4
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009a      	lsls	r2, r3, #2
 8002d3e:	441a      	add	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002d4c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	2064      	movs	r0, #100	@ 0x64
 8002d54:	fb00 f303 	mul.w	r3, r0, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	3332      	adds	r3, #50	@ 0x32
 8002d5e:	4a16      	ldr	r2, [pc, #88]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d6a:	4419      	add	r1, r3
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	441a      	add	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d82:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002d84:	fba3 0302 	umull	r0, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	2064      	movs	r0, #100	@ 0x64
 8002d8c:	fb00 f303 	mul.w	r3, r0, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	3332      	adds	r3, #50	@ 0x32
 8002d96:	4a08      	ldr	r2, [pc, #32]	@ (8002db8 <UART_SetConfig+0x1b0>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	440a      	add	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40013800 	.word	0x40013800
 8002db8:	51eb851f 	.word	0x51eb851f

08002dbc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc2:	f3ef 8305 	mrs	r3, IPSR
 8002dc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dce:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd2:	607b      	str	r3, [r7, #4]
  return(result);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <osKernelInitialize+0x32>
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <osKernelInitialize+0x60>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d109      	bne.n	8002df6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002de2:	f3ef 8311 	mrs	r3, BASEPRI
 8002de6:	603b      	str	r3, [r7, #0]
  return(result);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002dee:	f06f 0305 	mvn.w	r3, #5
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e00c      	b.n	8002e10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <osKernelInitialize+0x60>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d105      	bne.n	8002e0a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <osKernelInitialize+0x60>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e002      	b.n	8002e10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e10:	68fb      	ldr	r3, [r7, #12]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	2000018c 	.word	0x2000018c

08002e20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e26:	f3ef 8305 	mrs	r3, IPSR
 8002e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e32:	f3ef 8310 	mrs	r3, PRIMASK
 8002e36:	607b      	str	r3, [r7, #4]
  return(result);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <osKernelStart+0x32>
 8002e3e:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <osKernelStart+0x64>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d109      	bne.n	8002e5a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e46:	f3ef 8311 	mrs	r3, BASEPRI
 8002e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e52:	f06f 0305 	mvn.w	r3, #5
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e00e      	b.n	8002e78 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <osKernelStart+0x64>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <osKernelStart+0x64>)
 8002e64:	2202      	movs	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002e68:	f001 f8a8 	bl	8003fbc <vTaskStartScheduler>
      stat = osOK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e002      	b.n	8002e78 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e78:	68fb      	ldr	r3, [r7, #12]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	2000018c 	.word	0x2000018c

08002e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b092      	sub	sp, #72	@ 0x48
 8002e8c:	af04      	add	r7, sp, #16
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e98:	f3ef 8305 	mrs	r3, IPSR
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 8094 	bne.w	8002fce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eaa:	623b      	str	r3, [r7, #32]
  return(result);
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 808d 	bne.w	8002fce <osThreadNew+0x146>
 8002eb4:	4b48      	ldr	r3, [pc, #288]	@ (8002fd8 <osThreadNew+0x150>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d106      	bne.n	8002eca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8002ec0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 8082 	bne.w	8002fce <osThreadNew+0x146>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d07e      	beq.n	8002fce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002ed4:	2318      	movs	r3, #24
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002ed8:	2300      	movs	r3, #0
 8002eda:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002edc:	f107 031b 	add.w	r3, r7, #27
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d045      	beq.n	8002f7a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <osThreadNew+0x74>
        name = attr->name;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <osThreadNew+0x9a>
 8002f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f12:	2b38      	cmp	r3, #56	@ 0x38
 8002f14:	d805      	bhi.n	8002f22 <osThreadNew+0x9a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <osThreadNew+0x9e>
        return (NULL);
 8002f22:	2300      	movs	r3, #0
 8002f24:	e054      	b.n	8002fd0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00e      	beq.n	8002f5c <osThreadNew+0xd4>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2ba7      	cmp	r3, #167	@ 0xa7
 8002f44:	d90a      	bls.n	8002f5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <osThreadNew+0xd4>
        mem = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f5a:	e010      	b.n	8002f7e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10c      	bne.n	8002f7e <osThreadNew+0xf6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d108      	bne.n	8002f7e <osThreadNew+0xf6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <osThreadNew+0xf6>
          mem = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f78:	e001      	b.n	8002f7e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8002f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d110      	bne.n	8002fa6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f8c:	9202      	str	r2, [sp, #8]
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fe24 	bl	8003be8 <xTaskCreateStatic>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e013      	b.n	8002fce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d110      	bne.n	8002fce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fe71 	bl	8003ca6 <xTaskCreate>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <osThreadNew+0x146>
          hTask = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002fce:	697b      	ldr	r3, [r7, #20]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3738      	adds	r7, #56	@ 0x38
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	2000018c 	.word	0x2000018c

08002fdc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fe4:	f3ef 8305 	mrs	r3, IPSR
 8002fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8002fea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10f      	bne.n	8003010 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <osDelay+0x34>
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <osDelay+0x58>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d109      	bne.n	8003018 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003004:	f3ef 8311 	mrs	r3, BASEPRI
 8003008:	60bb      	str	r3, [r7, #8]
  return(result);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <osDelay+0x3c>
    stat = osErrorISR;
 8003010:	f06f 0305 	mvn.w	r3, #5
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	e007      	b.n	8003028 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 ff94 	bl	8003f50 <vTaskDelay>
    }
  }

  return (stat);
 8003028:	697b      	ldr	r3, [r7, #20]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000018c 	.word	0x2000018c

08003038 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a06      	ldr	r2, [pc, #24]	@ (8003060 <vApplicationGetIdleTaskMemory+0x28>)
 8003048:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <vApplicationGetIdleTaskMemory+0x2c>)
 800304e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2280      	movs	r2, #128	@ 0x80
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	20000190 	.word	0x20000190
 8003064:	20000238 	.word	0x20000238

08003068 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a07      	ldr	r2, [pc, #28]	@ (8003094 <vApplicationGetTimerTaskMemory+0x2c>)
 8003078:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4a06      	ldr	r2, [pc, #24]	@ (8003098 <vApplicationGetTimerTaskMemory+0x30>)
 800307e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003086:	601a      	str	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000438 	.word	0x20000438
 8003098:	200004e0 	.word	0x200004e0

0800309c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f103 0208 	add.w	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f103 0208 	add.w	r2, r3, #8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f103 0208 	add.w	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d103      	bne.n	8003158 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e00c      	b.n	8003172 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3308      	adds	r3, #8
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e002      	b.n	8003166 <vListInsert+0x2e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	d2f6      	bcs.n	8003160 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6892      	ldr	r2, [r2, #8]
 80031be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6852      	ldr	r2, [r2, #4]
 80031c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d103      	bne.n	80031dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
	...

080031fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003228:	f002 f828 	bl	800527c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	68f9      	ldr	r1, [r7, #12]
 8003236:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	441a      	add	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	3b01      	subs	r3, #1
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	441a      	add	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	22ff      	movs	r2, #255	@ 0xff
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	22ff      	movs	r2, #255	@ 0xff
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d114      	bne.n	80032a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01a      	beq.n	80032bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3310      	adds	r3, #16
 800328a:	4618      	mov	r0, r3
 800328c:	f001 f936 	bl	80044fc <xTaskRemoveFromEventList>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d012      	beq.n	80032bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <xQueueGenericReset+0xd0>)
 8003298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	e009      	b.n	80032bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3310      	adds	r3, #16
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fef5 	bl	800309c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3324      	adds	r3, #36	@ 0x24
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fef0 	bl	800309c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032bc:	f002 f80e 	bl	80052dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032c0:	2301      	movs	r3, #1
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000ed04 	.word	0xe000ed04

080032d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08e      	sub	sp, #56	@ 0x38
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	e7fd      	b.n	8003316 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <xQueueGenericCreateStatic+0x56>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <xQueueGenericCreateStatic+0x5a>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <xQueueGenericCreateStatic+0x5c>
 800332a:	2300      	movs	r3, #0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	623b      	str	r3, [r7, #32]
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <xQueueGenericCreateStatic+0x84>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <xQueueGenericCreateStatic+0x88>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <xQueueGenericCreateStatic+0x8a>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	61fb      	str	r3, [r7, #28]
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	e7fd      	b.n	8003372 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003376:	2350      	movs	r3, #80	@ 0x50
 8003378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b50      	cmp	r3, #80	@ 0x50
 800337e:	d00b      	beq.n	8003398 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	61bb      	str	r3, [r7, #24]
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033aa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80033ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f805 	bl	80033c8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3730      	adds	r7, #48	@ 0x30
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e002      	b.n	80033ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033f6:	2101      	movs	r1, #1
 80033f8:	69b8      	ldr	r0, [r7, #24]
 80033fa:	f7ff feff 	bl	80031fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08e      	sub	sp, #56	@ 0x38
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800341e:	2300      	movs	r3, #0
 8003420:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <xQueueGenericSend+0x34>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	e7fd      	b.n	8003440 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <xQueueGenericSend+0x42>
 800344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <xQueueGenericSend+0x46>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <xQueueGenericSend+0x48>
 8003456:	2300      	movs	r3, #0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <xQueueGenericSend+0x64>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d103      	bne.n	8003482 <xQueueGenericSend+0x72>
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <xQueueGenericSend+0x76>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <xQueueGenericSend+0x78>
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <xQueueGenericSend+0x94>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	623b      	str	r3, [r7, #32]
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a4:	f001 f9f4 	bl	8004890 <xTaskGetSchedulerState>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <xQueueGenericSend+0xa4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <xQueueGenericSend+0xa8>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <xQueueGenericSend+0xaa>
 80034b8:	2300      	movs	r3, #0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	61fb      	str	r3, [r7, #28]
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	e7fd      	b.n	80034d2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d6:	f001 fed1 	bl	800527c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <xQueueGenericSend+0xdc>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d129      	bne.n	8003540 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034f2:	f000 fa0d 	bl	8003910 <prvCopyDataToQueue>
 80034f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	3324      	adds	r3, #36	@ 0x24
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fff9 	bl	80044fc <xTaskRemoveFromEventList>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003510:	4b3f      	ldr	r3, [pc, #252]	@ (8003610 <xQueueGenericSend+0x200>)
 8003512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	e00a      	b.n	8003538 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003528:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <xQueueGenericSend+0x200>)
 800352a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003538:	f001 fed0 	bl	80052dc <vPortExitCritical>
				return pdPASS;
 800353c:	2301      	movs	r3, #1
 800353e:	e063      	b.n	8003608 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003546:	f001 fec9 	bl	80052dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800354a:	2300      	movs	r3, #0
 800354c:	e05c      	b.n	8003608 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800354e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4618      	mov	r0, r3
 800355a:	f001 f833 	bl	80045c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800355e:	2301      	movs	r3, #1
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003562:	f001 febb 	bl	80052dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003566:	f000 fd99 	bl	800409c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800356a:	f001 fe87 	bl	800527c <vPortEnterCritical>
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003574:	b25b      	sxtb	r3, r3
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d103      	bne.n	8003584 <xQueueGenericSend+0x174>
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800358a:	b25b      	sxtb	r3, r3
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d103      	bne.n	800359a <xQueueGenericSend+0x18a>
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800359a:	f001 fe9f 	bl	80052dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800359e:	1d3a      	adds	r2, r7, #4
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 f822 	bl	80045f0 <xTaskCheckForTimeOut>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d124      	bne.n	80035fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035b4:	f000 faa4 	bl	8003b00 <prvIsQueueFull>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d018      	beq.n	80035f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c0:	3310      	adds	r3, #16
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 ff46 	bl	8004458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ce:	f000 fa2f 	bl	8003a30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035d2:	f000 fd71 	bl	80040b8 <xTaskResumeAll>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f47f af7c 	bne.w	80034d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <xQueueGenericSend+0x200>)
 80035e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	e772      	b.n	80034d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035f2:	f000 fa1d 	bl	8003a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035f6:	f000 fd5f 	bl	80040b8 <xTaskResumeAll>
 80035fa:	e76c      	b.n	80034d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035fe:	f000 fa17 	bl	8003a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003602:	f000 fd59 	bl	80040b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003606:	2300      	movs	r3, #0
		}
	}
}
 8003608:	4618      	mov	r0, r3
 800360a:	3738      	adds	r7, #56	@ 0x38
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	e000ed04 	.word	0xe000ed04

08003614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	@ 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <xQueueGenericSendFromISR+0x3e>
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <xQueueGenericSendFromISR+0x42>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <xQueueGenericSendFromISR+0x44>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	623b      	str	r3, [r7, #32]
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d103      	bne.n	8003682 <xQueueGenericSendFromISR+0x6e>
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <xQueueGenericSendFromISR+0x72>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <xQueueGenericSendFromISR+0x74>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	61fb      	str	r3, [r7, #28]
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036a4:	f001 feac 	bl	8005400 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036a8:	f3ef 8211 	mrs	r2, BASEPRI
 80036ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	61ba      	str	r2, [r7, #24]
 80036be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <xQueueGenericSendFromISR+0xc2>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d12c      	bne.n	8003730 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036e6:	f000 f913 	bl	8003910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d112      	bne.n	800371a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	3324      	adds	r3, #36	@ 0x24
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fefb 	bl	80044fc <xTaskRemoveFromEventList>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e007      	b.n	800372a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800371a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800371e:	3301      	adds	r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	b25a      	sxtb	r2, r3
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800372a:	2301      	movs	r3, #1
 800372c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800372e:	e001      	b.n	8003734 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003730:	2300      	movs	r3, #0
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
 8003734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003736:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800373e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003742:	4618      	mov	r0, r3
 8003744:	3738      	adds	r7, #56	@ 0x38
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	@ 0x30
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003758:	2300      	movs	r3, #0
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10b      	bne.n	800377e <xQueueReceive+0x32>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	623b      	str	r3, [r7, #32]
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	e7fd      	b.n	800377a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <xQueueReceive+0x40>
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <xQueueReceive+0x44>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <xQueueReceive+0x46>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <xQueueReceive+0x62>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	61fb      	str	r3, [r7, #28]
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	e7fd      	b.n	80037aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ae:	f001 f86f 	bl	8004890 <xTaskGetSchedulerState>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <xQueueReceive+0x72>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <xQueueReceive+0x76>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <xQueueReceive+0x78>
 80037c2:	2300      	movs	r3, #0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <xQueueReceive+0x94>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	61bb      	str	r3, [r7, #24]
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80037e0:	f001 fd4c 	bl	800527c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01f      	beq.n	8003830 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037f4:	f000 f8f6 	bl	80039e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	1e5a      	subs	r2, r3, #1
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00f      	beq.n	8003828 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380a:	3310      	adds	r3, #16
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fe75 	bl	80044fc <xTaskRemoveFromEventList>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003818:	4b3c      	ldr	r3, [pc, #240]	@ (800390c <xQueueReceive+0x1c0>)
 800381a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003828:	f001 fd58 	bl	80052dc <vPortExitCritical>
				return pdPASS;
 800382c:	2301      	movs	r3, #1
 800382e:	e069      	b.n	8003904 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003836:	f001 fd51 	bl	80052dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800383a:	2300      	movs	r3, #0
 800383c:	e062      	b.n	8003904 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d106      	bne.n	8003852 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003844:	f107 0310 	add.w	r3, r7, #16
 8003848:	4618      	mov	r0, r3
 800384a:	f000 febb 	bl	80045c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800384e:	2301      	movs	r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003852:	f001 fd43 	bl	80052dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003856:	f000 fc21 	bl	800409c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800385a:	f001 fd0f 	bl	800527c <vPortEnterCritical>
 800385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003864:	b25b      	sxtb	r3, r3
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d103      	bne.n	8003874 <xQueueReceive+0x128>
 800386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800387a:	b25b      	sxtb	r3, r3
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d103      	bne.n	800388a <xQueueReceive+0x13e>
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800388a:	f001 fd27 	bl	80052dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800388e:	1d3a      	adds	r2, r7, #4
 8003890:	f107 0310 	add.w	r3, r7, #16
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 feaa 	bl	80045f0 <xTaskCheckForTimeOut>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d123      	bne.n	80038ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a4:	f000 f916 	bl	8003ad4 <prvIsQueueEmpty>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d017      	beq.n	80038de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	3324      	adds	r3, #36	@ 0x24
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fdce 	bl	8004458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038be:	f000 f8b7 	bl	8003a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038c2:	f000 fbf9 	bl	80040b8 <xTaskResumeAll>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d189      	bne.n	80037e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80038cc:	4b0f      	ldr	r3, [pc, #60]	@ (800390c <xQueueReceive+0x1c0>)
 80038ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	e780      	b.n	80037e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038e0:	f000 f8a6 	bl	8003a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038e4:	f000 fbe8 	bl	80040b8 <xTaskResumeAll>
 80038e8:	e77a      	b.n	80037e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ec:	f000 f8a0 	bl	8003a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038f0:	f000 fbe2 	bl	80040b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038f6:	f000 f8ed 	bl	8003ad4 <prvIsQueueEmpty>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f43f af6f 	beq.w	80037e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003902:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003904:	4618      	mov	r0, r3
 8003906:	3730      	adds	r7, #48	@ 0x30
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	e000ed04 	.word	0xe000ed04

08003910 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d14d      	bne.n	80039d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 ffc6 	bl	80048cc <xTaskPriorityDisinherit>
 8003940:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	e043      	b.n	80039d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d119      	bne.n	8003984 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6898      	ldr	r0, [r3, #8]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	461a      	mov	r2, r3
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	f002 f818 	bl	8005990 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	441a      	add	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d32b      	bcc.n	80039d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	e026      	b.n	80039d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68d8      	ldr	r0, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	461a      	mov	r2, r3
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	f001 fffe 	bl	8005990 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	425b      	negs	r3, r3
 800399e:	441a      	add	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d207      	bcs.n	80039c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	425b      	negs	r3, r3
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d105      	bne.n	80039d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80039da:	697b      	ldr	r3, [r7, #20]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	441a      	add	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d303      	bcc.n	8003a18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68d9      	ldr	r1, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	461a      	mov	r2, r3
 8003a22:	6838      	ldr	r0, [r7, #0]
 8003a24:	f001 ffb4 	bl	8005990 <memcpy>
	}
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a38:	f001 fc20 	bl	800527c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a44:	e011      	b.n	8003a6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d012      	beq.n	8003a74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3324      	adds	r3, #36	@ 0x24
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fd52 	bl	80044fc <xTaskRemoveFromEventList>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a5e:	f000 fe2b 	bl	80046b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	dce9      	bgt.n	8003a46 <prvUnlockQueue+0x16>
 8003a72:	e000      	b.n	8003a76 <prvUnlockQueue+0x46>
					break;
 8003a74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	22ff      	movs	r2, #255	@ 0xff
 8003a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a7e:	f001 fc2d 	bl	80052dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a82:	f001 fbfb 	bl	800527c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a8e:	e011      	b.n	8003ab4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3310      	adds	r3, #16
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fd2d 	bl	80044fc <xTaskRemoveFromEventList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003aa8:	f000 fe06 	bl	80046b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003aac:	7bbb      	ldrb	r3, [r7, #14]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	dce9      	bgt.n	8003a90 <prvUnlockQueue+0x60>
 8003abc:	e000      	b.n	8003ac0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003abe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	22ff      	movs	r2, #255	@ 0xff
 8003ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ac8:	f001 fc08 	bl	80052dc <vPortExitCritical>
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003adc:	f001 fbce 	bl	800527c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e001      	b.n	8003af2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003af2:	f001 fbf3 	bl	80052dc <vPortExitCritical>

	return xReturn;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b08:	f001 fbb8 	bl	800527c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d102      	bne.n	8003b1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e001      	b.n	8003b22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b22:	f001 fbdb 	bl	80052dc <vPortExitCritical>

	return xReturn;
 8003b26:	68fb      	ldr	r3, [r7, #12]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e014      	b.n	8003b6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b40:	4a0e      	ldr	r2, [pc, #56]	@ (8003b7c <vQueueAddToRegistry+0x4c>)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b4c:	490b      	ldr	r1, [pc, #44]	@ (8003b7c <vQueueAddToRegistry+0x4c>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b56:	4a09      	ldr	r2, [pc, #36]	@ (8003b7c <vQueueAddToRegistry+0x4c>)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b62:	e006      	b.n	8003b72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b07      	cmp	r3, #7
 8003b6e:	d9e7      	bls.n	8003b40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	200008e0 	.word	0x200008e0

08003b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b90:	f001 fb74 	bl	800527c <vPortEnterCritical>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b9a:	b25b      	sxtb	r3, r3
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d103      	bne.n	8003baa <vQueueWaitForMessageRestricted+0x2a>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d103      	bne.n	8003bc0 <vQueueWaitForMessageRestricted+0x40>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bc0:	f001 fb8c 	bl	80052dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3324      	adds	r3, #36	@ 0x24
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fc65 	bl	80044a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f7ff ff28 	bl	8003a30 <prvUnlockQueue>
	}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08e      	sub	sp, #56	@ 0x38
 8003bec:	af04      	add	r7, sp, #16
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	623b      	str	r3, [r7, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	61fb      	str	r3, [r7, #28]
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	e7fd      	b.n	8003c2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c32:	23a8      	movs	r3, #168	@ 0xa8
 8003c34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2ba8      	cmp	r3, #168	@ 0xa8
 8003c3a:	d00b      	beq.n	8003c54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	61bb      	str	r3, [r7, #24]
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	e7fd      	b.n	8003c50 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01e      	beq.n	8003c98 <xTaskCreateStatic+0xb0>
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01b      	beq.n	8003c98 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c72:	2300      	movs	r3, #0
 8003c74:	9303      	str	r3, [sp, #12]
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	9302      	str	r3, [sp, #8]
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f850 	bl	8003d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c92:	f000 f8ed 	bl	8003e70 <prvAddNewTaskToReadyList>
 8003c96:	e001      	b.n	8003c9c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c9c:	697b      	ldr	r3, [r7, #20]
	}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3728      	adds	r7, #40	@ 0x28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b08c      	sub	sp, #48	@ 0x30
 8003caa:	af04      	add	r7, sp, #16
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fbe0 	bl	8005480 <pvPortMalloc>
 8003cc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00e      	beq.n	8003ce6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003cc8:	20a8      	movs	r0, #168	@ 0xa8
 8003cca:	f001 fbd9 	bl	8005480 <pvPortMalloc>
 8003cce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cdc:	e005      	b.n	8003cea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f001 fc96 	bl	8005610 <vPortFree>
 8003ce4:	e001      	b.n	8003cea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d017      	beq.n	8003d20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cf8:	88fa      	ldrh	r2, [r7, #6]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9303      	str	r3, [sp, #12]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	9302      	str	r3, [sp, #8]
 8003d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f80e 	bl	8003d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d14:	69f8      	ldr	r0, [r7, #28]
 8003d16:	f000 f8ab 	bl	8003e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e002      	b.n	8003d26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d26:	69bb      	ldr	r3, [r7, #24]
	}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	461a      	mov	r2, r3
 8003d48:	21a5      	movs	r1, #165	@ 0xa5
 8003d4a:	f001 fd97 	bl	800587c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	617b      	str	r3, [r7, #20]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	e012      	b.n	8003db6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	7819      	ldrb	r1, [r3, #0]
 8003d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3334      	adds	r3, #52	@ 0x34
 8003da0:	460a      	mov	r2, r1
 8003da2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d006      	beq.n	8003dbe <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2b0f      	cmp	r3, #15
 8003dba:	d9e9      	bls.n	8003d90 <prvInitialiseNewTask+0x60>
 8003dbc:	e000      	b.n	8003dc0 <prvInitialiseNewTask+0x90>
		{
			break;
 8003dbe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	2b37      	cmp	r3, #55	@ 0x37
 8003dcc:	d901      	bls.n	8003dd2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dce:	2337      	movs	r3, #55	@ 0x37
 8003dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	2200      	movs	r2, #0
 8003de2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff f976 	bl	80030da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	3318      	adds	r3, #24
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff f971 	bl	80030da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	3354      	adds	r3, #84	@ 0x54
 8003e22:	224c      	movs	r2, #76	@ 0x4c
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fd28 	bl	800587c <memset>
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e64 <prvInitialiseNewTask+0x134>)
 8003e30:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	4a0c      	ldr	r2, [pc, #48]	@ (8003e68 <prvInitialiseNewTask+0x138>)
 8003e36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e6c <prvInitialiseNewTask+0x13c>)
 8003e3c:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	68f9      	ldr	r1, [r7, #12]
 8003e42:	69b8      	ldr	r0, [r7, #24]
 8003e44:	f001 f926 	bl	8005094 <pxPortInitialiseStack>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e5a:	bf00      	nop
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20001d7c 	.word	0x20001d7c
 8003e68:	20001de4 	.word	0x20001de4
 8003e6c:	20001e4c 	.word	0x20001e4c

08003e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e78:	f001 fa00 	bl	800527c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f34 <prvAddNewTaskToReadyList+0xc4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	4a2c      	ldr	r2, [pc, #176]	@ (8003f34 <prvAddNewTaskToReadyList+0xc4>)
 8003e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e86:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <prvAddNewTaskToReadyList+0xc8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f38 <prvAddNewTaskToReadyList+0xc8>)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e94:	4b27      	ldr	r3, [pc, #156]	@ (8003f34 <prvAddNewTaskToReadyList+0xc4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d110      	bne.n	8003ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e9c:	f000 fc30 	bl	8004700 <prvInitialiseTaskLists>
 8003ea0:	e00d      	b.n	8003ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ea2:	4b26      	ldr	r3, [pc, #152]	@ (8003f3c <prvAddNewTaskToReadyList+0xcc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eaa:	4b23      	ldr	r3, [pc, #140]	@ (8003f38 <prvAddNewTaskToReadyList+0xc8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d802      	bhi.n	8003ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f38 <prvAddNewTaskToReadyList+0xc8>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ebe:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <prvAddNewTaskToReadyList+0xd0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <prvAddNewTaskToReadyList+0xd0>)
 8003ec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <prvAddNewTaskToReadyList+0xd0>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <prvAddNewTaskToReadyList+0xd4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d903      	bls.n	8003ee4 <prvAddNewTaskToReadyList+0x74>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	4a18      	ldr	r2, [pc, #96]	@ (8003f44 <prvAddNewTaskToReadyList+0xd4>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <prvAddNewTaskToReadyList+0xd8>)
 8003ef2:	441a      	add	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7ff f8f9 	bl	80030f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f00:	f001 f9ec 	bl	80052dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f04:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <prvAddNewTaskToReadyList+0xcc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <prvAddNewTaskToReadyList+0xc8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d207      	bcs.n	8003f2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f4c <prvAddNewTaskToReadyList+0xdc>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000df4 	.word	0x20000df4
 8003f38:	20000920 	.word	0x20000920
 8003f3c:	20000e00 	.word	0x20000e00
 8003f40:	20000e10 	.word	0x20000e10
 8003f44:	20000dfc 	.word	0x20000dfc
 8003f48:	20000924 	.word	0x20000924
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d018      	beq.n	8003f94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f62:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <vTaskDelay+0x64>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <vTaskDelay+0x32>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60bb      	str	r3, [r7, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	e7fd      	b.n	8003f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f82:	f000 f88b 	bl	800409c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f86:	2100      	movs	r1, #0
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fd0f 	bl	80049ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f8e:	f000 f893 	bl	80040b8 <xTaskResumeAll>
 8003f92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f9a:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <vTaskDelay+0x68>)
 8003f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000e1c 	.word	0x20000e1c
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fca:	463a      	mov	r2, r7
 8003fcc:	1d39      	adds	r1, r7, #4
 8003fce:	f107 0308 	add.w	r3, r7, #8
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff f830 	bl	8003038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	9202      	str	r2, [sp, #8]
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	460a      	mov	r2, r1
 8003fea:	4924      	ldr	r1, [pc, #144]	@ (800407c <vTaskStartScheduler+0xc0>)
 8003fec:	4824      	ldr	r0, [pc, #144]	@ (8004080 <vTaskStartScheduler+0xc4>)
 8003fee:	f7ff fdfb 	bl	8003be8 <xTaskCreateStatic>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a23      	ldr	r2, [pc, #140]	@ (8004084 <vTaskStartScheduler+0xc8>)
 8003ff6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ff8:	4b22      	ldr	r3, [pc, #136]	@ (8004084 <vTaskStartScheduler+0xc8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004000:	2301      	movs	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e001      	b.n	800400a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d102      	bne.n	8004016 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004010:	f000 fd20 	bl	8004a54 <xTimerCreateTimerTask>
 8004014:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d11b      	bne.n	8004054 <vTaskStartScheduler+0x98>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	613b      	str	r3, [r7, #16]
}
 800402e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004030:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <vTaskStartScheduler+0xcc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3354      	adds	r3, #84	@ 0x54
 8004036:	4a15      	ldr	r2, [pc, #84]	@ (800408c <vTaskStartScheduler+0xd0>)
 8004038:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800403a:	4b15      	ldr	r3, [pc, #84]	@ (8004090 <vTaskStartScheduler+0xd4>)
 800403c:	f04f 32ff 	mov.w	r2, #4294967295
 8004040:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004042:	4b14      	ldr	r3, [pc, #80]	@ (8004094 <vTaskStartScheduler+0xd8>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004048:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <vTaskStartScheduler+0xdc>)
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800404e:	f001 f8a3 	bl	8005198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004052:	e00f      	b.n	8004074 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d10b      	bne.n	8004074 <vTaskStartScheduler+0xb8>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60fb      	str	r3, [r7, #12]
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <vTaskStartScheduler+0xb4>
}
 8004074:	bf00      	nop
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	08006388 	.word	0x08006388
 8004080:	080046d1 	.word	0x080046d1
 8004084:	20000e18 	.word	0x20000e18
 8004088:	20000920 	.word	0x20000920
 800408c:	20000010 	.word	0x20000010
 8004090:	20000e14 	.word	0x20000e14
 8004094:	20000e00 	.word	0x20000e00
 8004098:	20000df8 	.word	0x20000df8

0800409c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040a0:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <vTaskSuspendAll+0x18>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a03      	ldr	r2, [pc, #12]	@ (80040b4 <vTaskSuspendAll+0x18>)
 80040a8:	6013      	str	r3, [r2, #0]
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000e1c 	.word	0x20000e1c

080040b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040c6:	4b42      	ldr	r3, [pc, #264]	@ (80041d0 <xTaskResumeAll+0x118>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	603b      	str	r3, [r7, #0]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040e6:	f001 f8c9 	bl	800527c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <xTaskResumeAll+0x118>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	4a37      	ldr	r2, [pc, #220]	@ (80041d0 <xTaskResumeAll+0x118>)
 80040f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f4:	4b36      	ldr	r3, [pc, #216]	@ (80041d0 <xTaskResumeAll+0x118>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d162      	bne.n	80041c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040fc:	4b35      	ldr	r3, [pc, #212]	@ (80041d4 <xTaskResumeAll+0x11c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d05e      	beq.n	80041c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004104:	e02f      	b.n	8004166 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004106:	4b34      	ldr	r3, [pc, #208]	@ (80041d8 <xTaskResumeAll+0x120>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3318      	adds	r3, #24
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff f848 	bl	80031a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3304      	adds	r3, #4
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f843 	bl	80031a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004126:	4b2d      	ldr	r3, [pc, #180]	@ (80041dc <xTaskResumeAll+0x124>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d903      	bls.n	8004136 <xTaskResumeAll+0x7e>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	4a2a      	ldr	r2, [pc, #168]	@ (80041dc <xTaskResumeAll+0x124>)
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <xTaskResumeAll+0x128>)
 8004144:	441a      	add	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f7fe ffd0 	bl	80030f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004156:	4b23      	ldr	r3, [pc, #140]	@ (80041e4 <xTaskResumeAll+0x12c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004160:	4b21      	ldr	r3, [pc, #132]	@ (80041e8 <xTaskResumeAll+0x130>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004166:	4b1c      	ldr	r3, [pc, #112]	@ (80041d8 <xTaskResumeAll+0x120>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1cb      	bne.n	8004106 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004174:	f000 fb68 	bl	8004848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004178:	4b1c      	ldr	r3, [pc, #112]	@ (80041ec <xTaskResumeAll+0x134>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004184:	f000 f844 	bl	8004210 <xTaskIncrementTick>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800418e:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <xTaskResumeAll+0x130>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3b01      	subs	r3, #1
 8004198:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f1      	bne.n	8004184 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80041a0:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <xTaskResumeAll+0x134>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <xTaskResumeAll+0x130>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041ae:	2301      	movs	r3, #1
 80041b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041b2:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <xTaskResumeAll+0x138>)
 80041b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041c2:	f001 f88b 	bl	80052dc <vPortExitCritical>

	return xAlreadyYielded;
 80041c6:	68bb      	ldr	r3, [r7, #8]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000e1c 	.word	0x20000e1c
 80041d4:	20000df4 	.word	0x20000df4
 80041d8:	20000db4 	.word	0x20000db4
 80041dc:	20000dfc 	.word	0x20000dfc
 80041e0:	20000924 	.word	0x20000924
 80041e4:	20000920 	.word	0x20000920
 80041e8:	20000e08 	.word	0x20000e08
 80041ec:	20000e04 	.word	0x20000e04
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041fa:	4b04      	ldr	r3, [pc, #16]	@ (800420c <xTaskGetTickCount+0x18>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004200:	687b      	ldr	r3, [r7, #4]
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	20000df8 	.word	0x20000df8

08004210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800421a:	4b52      	ldr	r3, [pc, #328]	@ (8004364 <xTaskIncrementTick+0x154>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 808f 	bne.w	8004342 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004224:	4b50      	ldr	r3, [pc, #320]	@ (8004368 <xTaskIncrementTick+0x158>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3301      	adds	r3, #1
 800422a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800422c:	4a4e      	ldr	r2, [pc, #312]	@ (8004368 <xTaskIncrementTick+0x158>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d121      	bne.n	800427c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004238:	4b4c      	ldr	r3, [pc, #304]	@ (800436c <xTaskIncrementTick+0x15c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	603b      	str	r3, [r7, #0]
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <xTaskIncrementTick+0x46>
 800425a:	4b44      	ldr	r3, [pc, #272]	@ (800436c <xTaskIncrementTick+0x15c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	4b43      	ldr	r3, [pc, #268]	@ (8004370 <xTaskIncrementTick+0x160>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a41      	ldr	r2, [pc, #260]	@ (800436c <xTaskIncrementTick+0x15c>)
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4a41      	ldr	r2, [pc, #260]	@ (8004370 <xTaskIncrementTick+0x160>)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b41      	ldr	r3, [pc, #260]	@ (8004374 <xTaskIncrementTick+0x164>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	4a3f      	ldr	r2, [pc, #252]	@ (8004374 <xTaskIncrementTick+0x164>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	f000 fae6 	bl	8004848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800427c:	4b3e      	ldr	r3, [pc, #248]	@ (8004378 <xTaskIncrementTick+0x168>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	d34e      	bcc.n	8004324 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004286:	4b39      	ldr	r3, [pc, #228]	@ (800436c <xTaskIncrementTick+0x15c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <xTaskIncrementTick+0x84>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <xTaskIncrementTick+0x86>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429a:	4b37      	ldr	r3, [pc, #220]	@ (8004378 <xTaskIncrementTick+0x168>)
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	601a      	str	r2, [r3, #0]
					break;
 80042a2:	e03f      	b.n	8004324 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042a4:	4b31      	ldr	r3, [pc, #196]	@ (800436c <xTaskIncrementTick+0x15c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d203      	bcs.n	80042c4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004378 <xTaskIncrementTick+0x168>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6013      	str	r3, [r2, #0]
						break;
 80042c2:	e02f      	b.n	8004324 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe ff6d 	bl	80031a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	3318      	adds	r3, #24
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe ff64 	bl	80031a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e4:	4b25      	ldr	r3, [pc, #148]	@ (800437c <xTaskIncrementTick+0x16c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d903      	bls.n	80042f4 <xTaskIncrementTick+0xe4>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	4a22      	ldr	r2, [pc, #136]	@ (800437c <xTaskIncrementTick+0x16c>)
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4a1f      	ldr	r2, [pc, #124]	@ (8004380 <xTaskIncrementTick+0x170>)
 8004302:	441a      	add	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	3304      	adds	r3, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f7fe fef1 	bl	80030f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004314:	4b1b      	ldr	r3, [pc, #108]	@ (8004384 <xTaskIncrementTick+0x174>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431a:	429a      	cmp	r2, r3
 800431c:	d3b3      	bcc.n	8004286 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800431e:	2301      	movs	r3, #1
 8004320:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004322:	e7b0      	b.n	8004286 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004324:	4b17      	ldr	r3, [pc, #92]	@ (8004384 <xTaskIncrementTick+0x174>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432a:	4915      	ldr	r1, [pc, #84]	@ (8004380 <xTaskIncrementTick+0x170>)
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d907      	bls.n	800434c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e004      	b.n	800434c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004342:	4b11      	ldr	r3, [pc, #68]	@ (8004388 <xTaskIncrementTick+0x178>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	4a0f      	ldr	r2, [pc, #60]	@ (8004388 <xTaskIncrementTick+0x178>)
 800434a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800434c:	4b0f      	ldr	r3, [pc, #60]	@ (800438c <xTaskIncrementTick+0x17c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004358:	697b      	ldr	r3, [r7, #20]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000e1c 	.word	0x20000e1c
 8004368:	20000df8 	.word	0x20000df8
 800436c:	20000dac 	.word	0x20000dac
 8004370:	20000db0 	.word	0x20000db0
 8004374:	20000e0c 	.word	0x20000e0c
 8004378:	20000e14 	.word	0x20000e14
 800437c:	20000dfc 	.word	0x20000dfc
 8004380:	20000924 	.word	0x20000924
 8004384:	20000920 	.word	0x20000920
 8004388:	20000e04 	.word	0x20000e04
 800438c:	20000e08 	.word	0x20000e08

08004390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004396:	4b2a      	ldr	r3, [pc, #168]	@ (8004440 <vTaskSwitchContext+0xb0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800439e:	4b29      	ldr	r3, [pc, #164]	@ (8004444 <vTaskSwitchContext+0xb4>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043a4:	e047      	b.n	8004436 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80043a6:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <vTaskSwitchContext+0xb4>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043ac:	4b26      	ldr	r3, [pc, #152]	@ (8004448 <vTaskSwitchContext+0xb8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e011      	b.n	80043d8 <vTaskSwitchContext+0x48>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	607b      	str	r3, [r7, #4]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <vTaskSwitchContext+0x3e>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	491c      	ldr	r1, [pc, #112]	@ (800444c <vTaskSwitchContext+0xbc>)
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0e3      	beq.n	80043b4 <vTaskSwitchContext+0x24>
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4a15      	ldr	r2, [pc, #84]	@ (800444c <vTaskSwitchContext+0xbc>)
 80043f8:	4413      	add	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	3308      	adds	r3, #8
 800440e:	429a      	cmp	r2, r3
 8004410:	d104      	bne.n	800441c <vTaskSwitchContext+0x8c>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a0b      	ldr	r2, [pc, #44]	@ (8004450 <vTaskSwitchContext+0xc0>)
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4a08      	ldr	r2, [pc, #32]	@ (8004448 <vTaskSwitchContext+0xb8>)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800442c:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <vTaskSwitchContext+0xc0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3354      	adds	r3, #84	@ 0x54
 8004432:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <vTaskSwitchContext+0xc4>)
 8004434:	6013      	str	r3, [r2, #0]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	20000e1c 	.word	0x20000e1c
 8004444:	20000e08 	.word	0x20000e08
 8004448:	20000dfc 	.word	0x20000dfc
 800444c:	20000924 	.word	0x20000924
 8004450:	20000920 	.word	0x20000920
 8004454:	20000010 	.word	0x20000010

08004458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004480:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <vTaskPlaceOnEventList+0x48>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3318      	adds	r3, #24
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fe fe55 	bl	8003138 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800448e:	2101      	movs	r1, #1
 8004490:	6838      	ldr	r0, [r7, #0]
 8004492:	f000 fa8b 	bl	80049ac <prvAddCurrentTaskToDelayedList>
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000920 	.word	0x20000920

080044a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	617b      	str	r3, [r7, #20]
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	e7fd      	b.n	80044ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3318      	adds	r3, #24
 80044d4:	4619      	mov	r1, r3
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7fe fe0b 	bl	80030f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	68b8      	ldr	r0, [r7, #8]
 80044ec:	f000 fa5e 	bl	80049ac <prvAddCurrentTaskToDelayedList>
	}
 80044f0:	bf00      	nop
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000920 	.word	0x20000920

080044fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60fb      	str	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3318      	adds	r3, #24
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fe3a 	bl	80031a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004534:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <xTaskRemoveFromEventList+0xb0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d11d      	bne.n	8004578 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fe31 	bl	80031a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454a:	4b19      	ldr	r3, [pc, #100]	@ (80045b0 <xTaskRemoveFromEventList+0xb4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d903      	bls.n	800455a <xTaskRemoveFromEventList+0x5e>
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	4a16      	ldr	r2, [pc, #88]	@ (80045b0 <xTaskRemoveFromEventList+0xb4>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4a13      	ldr	r2, [pc, #76]	@ (80045b4 <xTaskRemoveFromEventList+0xb8>)
 8004568:	441a      	add	r2, r3
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7fe fdbe 	bl	80030f2 <vListInsertEnd>
 8004576:	e005      	b.n	8004584 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3318      	adds	r3, #24
 800457c:	4619      	mov	r1, r3
 800457e:	480e      	ldr	r0, [pc, #56]	@ (80045b8 <xTaskRemoveFromEventList+0xbc>)
 8004580:	f7fe fdb7 	bl	80030f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004588:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <xTaskRemoveFromEventList+0xc0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	429a      	cmp	r2, r3
 8004590:	d905      	bls.n	800459e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004592:	2301      	movs	r3, #1
 8004594:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <xTaskRemoveFromEventList+0xc4>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e001      	b.n	80045a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80045a2:	697b      	ldr	r3, [r7, #20]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000e1c 	.word	0x20000e1c
 80045b0:	20000dfc 	.word	0x20000dfc
 80045b4:	20000924 	.word	0x20000924
 80045b8:	20000db4 	.word	0x20000db4
 80045bc:	20000920 	.word	0x20000920
 80045c0:	20000e08 	.word	0x20000e08

080045c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <vTaskInternalSetTimeOutState+0x24>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <vTaskInternalSetTimeOutState+0x28>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000e0c 	.word	0x20000e0c
 80045ec:	20000df8 	.word	0x20000df8

080045f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60fb      	str	r3, [r7, #12]
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004636:	f000 fe21 	bl	800527c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800463a:	4b1d      	ldr	r3, [pc, #116]	@ (80046b0 <xTaskCheckForTimeOut+0xc0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d102      	bne.n	800465a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	e023      	b.n	80046a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <xTaskCheckForTimeOut+0xc4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d007      	beq.n	8004676 <xTaskCheckForTimeOut+0x86>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	e015      	b.n	80046a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	429a      	cmp	r2, r3
 800467e:	d20b      	bcs.n	8004698 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff99 	bl	80045c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	e004      	b.n	80046a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046a2:	f000 fe1b 	bl	80052dc <vPortExitCritical>

	return xReturn;
 80046a6:	69fb      	ldr	r3, [r7, #28]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000df8 	.word	0x20000df8
 80046b4:	20000e0c 	.word	0x20000e0c

080046b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046bc:	4b03      	ldr	r3, [pc, #12]	@ (80046cc <vTaskMissedYield+0x14>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20000e08 	.word	0x20000e08

080046d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046d8:	f000 f852 	bl	8004780 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <prvIdleTask+0x28>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d9f9      	bls.n	80046d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <prvIdleTask+0x2c>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046f4:	e7f0      	b.n	80046d8 <prvIdleTask+0x8>
 80046f6:	bf00      	nop
 80046f8:	20000924 	.word	0x20000924
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004706:	2300      	movs	r3, #0
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	e00c      	b.n	8004726 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <prvInitialiseTaskLists+0x60>)
 8004718:	4413      	add	r3, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fcbe 	bl	800309c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3301      	adds	r3, #1
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b37      	cmp	r3, #55	@ 0x37
 800472a:	d9ef      	bls.n	800470c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800472c:	480d      	ldr	r0, [pc, #52]	@ (8004764 <prvInitialiseTaskLists+0x64>)
 800472e:	f7fe fcb5 	bl	800309c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004732:	480d      	ldr	r0, [pc, #52]	@ (8004768 <prvInitialiseTaskLists+0x68>)
 8004734:	f7fe fcb2 	bl	800309c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004738:	480c      	ldr	r0, [pc, #48]	@ (800476c <prvInitialiseTaskLists+0x6c>)
 800473a:	f7fe fcaf 	bl	800309c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800473e:	480c      	ldr	r0, [pc, #48]	@ (8004770 <prvInitialiseTaskLists+0x70>)
 8004740:	f7fe fcac 	bl	800309c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004744:	480b      	ldr	r0, [pc, #44]	@ (8004774 <prvInitialiseTaskLists+0x74>)
 8004746:	f7fe fca9 	bl	800309c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800474a:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <prvInitialiseTaskLists+0x78>)
 800474c:	4a05      	ldr	r2, [pc, #20]	@ (8004764 <prvInitialiseTaskLists+0x64>)
 800474e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <prvInitialiseTaskLists+0x7c>)
 8004752:	4a05      	ldr	r2, [pc, #20]	@ (8004768 <prvInitialiseTaskLists+0x68>)
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000924 	.word	0x20000924
 8004764:	20000d84 	.word	0x20000d84
 8004768:	20000d98 	.word	0x20000d98
 800476c:	20000db4 	.word	0x20000db4
 8004770:	20000dc8 	.word	0x20000dc8
 8004774:	20000de0 	.word	0x20000de0
 8004778:	20000dac 	.word	0x20000dac
 800477c:	20000db0 	.word	0x20000db0

08004780 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004786:	e019      	b.n	80047bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004788:	f000 fd78 	bl	800527c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800478c:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <prvCheckTasksWaitingTermination+0x50>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe fd05 	bl	80031a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800479e:	4b0d      	ldr	r3, [pc, #52]	@ (80047d4 <prvCheckTasksWaitingTermination+0x54>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	4a0b      	ldr	r2, [pc, #44]	@ (80047d4 <prvCheckTasksWaitingTermination+0x54>)
 80047a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047a8:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <prvCheckTasksWaitingTermination+0x58>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	4a0a      	ldr	r2, [pc, #40]	@ (80047d8 <prvCheckTasksWaitingTermination+0x58>)
 80047b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047b2:	f000 fd93 	bl	80052dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f810 	bl	80047dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047bc:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <prvCheckTasksWaitingTermination+0x58>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e1      	bne.n	8004788 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000dc8 	.word	0x20000dc8
 80047d4:	20000df4 	.word	0x20000df4
 80047d8:	20000ddc 	.word	0x20000ddc

080047dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3354      	adds	r3, #84	@ 0x54
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f84f 	bl	800588c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d108      	bne.n	800480a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 ff07 	bl	8005610 <vPortFree>
				vPortFree( pxTCB );
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 ff04 	bl	8005610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004808:	e019      	b.n	800483e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004810:	2b01      	cmp	r3, #1
 8004812:	d103      	bne.n	800481c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fefb 	bl	8005610 <vPortFree>
	}
 800481a:	e010      	b.n	800483e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004822:	2b02      	cmp	r3, #2
 8004824:	d00b      	beq.n	800483e <prvDeleteTCB+0x62>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60fb      	str	r3, [r7, #12]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <prvDeleteTCB+0x5e>
	}
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800484e:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <prvResetNextTaskUnblockTime+0x40>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <prvResetNextTaskUnblockTime+0x14>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <prvResetNextTaskUnblockTime+0x16>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <prvResetNextTaskUnblockTime+0x44>)
 8004864:	f04f 32ff 	mov.w	r2, #4294967295
 8004868:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800486a:	e008      	b.n	800487e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <prvResetNextTaskUnblockTime+0x40>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4a04      	ldr	r2, [pc, #16]	@ (800488c <prvResetNextTaskUnblockTime+0x44>)
 800487c:	6013      	str	r3, [r2, #0]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	20000dac 	.word	0x20000dac
 800488c:	20000e14 	.word	0x20000e14

08004890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004896:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <xTaskGetSchedulerState+0x34>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800489e:	2301      	movs	r3, #1
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	e008      	b.n	80048b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a4:	4b08      	ldr	r3, [pc, #32]	@ (80048c8 <xTaskGetSchedulerState+0x38>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d102      	bne.n	80048b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048ac:	2302      	movs	r3, #2
 80048ae:	607b      	str	r3, [r7, #4]
 80048b0:	e001      	b.n	80048b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048b6:	687b      	ldr	r3, [r7, #4]
	}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000e00 	.word	0x20000e00
 80048c8:	20000e1c 	.word	0x20000e1c

080048cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d058      	beq.n	8004994 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048e2:	4b2f      	ldr	r3, [pc, #188]	@ (80049a0 <xTaskPriorityDisinherit+0xd4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d00b      	beq.n	8004904 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	60fb      	str	r3, [r7, #12]
}
 80048fe:	bf00      	nop
 8004900:	bf00      	nop
 8004902:	e7fd      	b.n	8004900 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60bb      	str	r3, [r7, #8]
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004936:	429a      	cmp	r2, r3
 8004938:	d02c      	beq.n	8004994 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493e:	2b00      	cmp	r3, #0
 8004940:	d128      	bne.n	8004994 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	3304      	adds	r3, #4
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fc2e 	bl	80031a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004964:	4b0f      	ldr	r3, [pc, #60]	@ (80049a4 <xTaskPriorityDisinherit+0xd8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d903      	bls.n	8004974 <xTaskPriorityDisinherit+0xa8>
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	4a0c      	ldr	r2, [pc, #48]	@ (80049a4 <xTaskPriorityDisinherit+0xd8>)
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4a09      	ldr	r2, [pc, #36]	@ (80049a8 <xTaskPriorityDisinherit+0xdc>)
 8004982:	441a      	add	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f7fe fbb1 	bl	80030f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004994:	697b      	ldr	r3, [r7, #20]
	}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000920 	.word	0x20000920
 80049a4:	20000dfc 	.word	0x20000dfc
 80049a8:	20000924 	.word	0x20000924

080049ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049b6:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <prvAddCurrentTaskToDelayedList+0x90>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049bc:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fbf0 	bl	80031a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d10a      	bne.n	80049e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4819      	ldr	r0, [pc, #100]	@ (8004a44 <prvAddCurrentTaskToDelayedList+0x98>)
 80049e0:	f7fe fb87 	bl	80030f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049e4:	e026      	b.n	8004a34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d209      	bcs.n	8004a12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049fe:	4b12      	ldr	r3, [pc, #72]	@ (8004a48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7fe fb94 	bl	8003138 <vListInsert>
}
 8004a10:	e010      	b.n	8004a34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a12:	4b0e      	ldr	r3, [pc, #56]	@ (8004a4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe fb8a 	bl	8003138 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a24:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d202      	bcs.n	8004a34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a2e:	4a08      	ldr	r2, [pc, #32]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6013      	str	r3, [r2, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000df8 	.word	0x20000df8
 8004a40:	20000920 	.word	0x20000920
 8004a44:	20000de0 	.word	0x20000de0
 8004a48:	20000db0 	.word	0x20000db0
 8004a4c:	20000dac 	.word	0x20000dac
 8004a50:	20000e14 	.word	0x20000e14

08004a54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	@ 0x28
 8004a58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a5e:	f000 fad9 	bl	8005014 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <xTimerCreateTimerTask+0x84>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d021      	beq.n	8004aae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a72:	1d3a      	adds	r2, r7, #4
 8004a74:	f107 0108 	add.w	r1, r7, #8
 8004a78:	f107 030c 	add.w	r3, r7, #12
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe faf3 	bl	8003068 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	9202      	str	r2, [sp, #8]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2300      	movs	r3, #0
 8004a92:	460a      	mov	r2, r1
 8004a94:	4911      	ldr	r1, [pc, #68]	@ (8004adc <xTimerCreateTimerTask+0x88>)
 8004a96:	4812      	ldr	r0, [pc, #72]	@ (8004ae0 <xTimerCreateTimerTask+0x8c>)
 8004a98:	f7ff f8a6 	bl	8003be8 <xTaskCreateStatic>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <xTimerCreateTimerTask+0x90>)
 8004aa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <xTimerCreateTimerTask+0x90>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	613b      	str	r3, [r7, #16]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004acc:	697b      	ldr	r3, [r7, #20]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000e50 	.word	0x20000e50
 8004adc:	08006390 	.word	0x08006390
 8004ae0:	08004c09 	.word	0x08004c09
 8004ae4:	20000e54 	.word	0x20000e54

08004ae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	623b      	str	r3, [r7, #32]
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b18:	4b19      	ldr	r3, [pc, #100]	@ (8004b80 <xTimerGenericCommand+0x98>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02a      	beq.n	8004b76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	dc18      	bgt.n	8004b64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b32:	f7ff fead 	bl	8004890 <xTaskGetSchedulerState>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d109      	bne.n	8004b50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b3c:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <xTimerGenericCommand+0x98>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	f107 0110 	add.w	r1, r7, #16
 8004b44:	2300      	movs	r3, #0
 8004b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b48:	f7fe fc62 	bl	8003410 <xQueueGenericSend>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b4e:	e012      	b.n	8004b76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <xTimerGenericCommand+0x98>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	f107 0110 	add.w	r1, r7, #16
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f7fe fc58 	bl	8003410 <xQueueGenericSend>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b62:	e008      	b.n	8004b76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <xTimerGenericCommand+0x98>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	f107 0110 	add.w	r1, r7, #16
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	f7fe fd50 	bl	8003614 <xQueueGenericSendFromISR>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	@ 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000e50 	.word	0x20000e50

08004b84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <prvProcessExpiredTimer+0x80>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe fb03 	bl	80031a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d123      	bne.n	8004bf2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	18d1      	adds	r1, r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	6978      	ldr	r0, [r7, #20]
 8004bb8:	f000 f8cc 	bl	8004d54 <prvInsertTimerInActiveList>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d017      	beq.n	8004bf2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f7ff ff8b 	bl	8004ae8 <xTimerGenericCommand>
 8004bd2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60fb      	str	r3, [r7, #12]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	6978      	ldr	r0, [r7, #20]
 8004bf8:	4798      	blx	r3
}
 8004bfa:	bf00      	nop
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000e48 	.word	0x20000e48

08004c08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c10:	f107 0308 	add.w	r3, r7, #8
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 f859 	bl	8004ccc <prvGetNextExpireTime>
 8004c1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f805 	bl	8004c30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c26:	f000 f8d7 	bl	8004dd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c2a:	bf00      	nop
 8004c2c:	e7f0      	b.n	8004c10 <prvTimerTask+0x8>
	...

08004c30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c3a:	f7ff fa2f 	bl	800409c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c3e:	f107 0308 	add.w	r3, r7, #8
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f866 	bl	8004d14 <prvSampleTimeNow>
 8004c48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d130      	bne.n	8004cb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <prvProcessTimerOrBlockTask+0x3c>
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d806      	bhi.n	8004c6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c5e:	f7ff fa2b 	bl	80040b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff8d 	bl	8004b84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c6a:	e024      	b.n	8004cb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c72:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <prvProcessTimerOrBlockTask+0x90>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c84:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <prvProcessTimerOrBlockTask+0x94>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	4619      	mov	r1, r3
 8004c92:	f7fe ff75 	bl	8003b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c96:	f7ff fa0f 	bl	80040b8 <xTaskResumeAll>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ca0:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <prvProcessTimerOrBlockTask+0x98>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
}
 8004cb0:	e001      	b.n	8004cb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004cb2:	f7ff fa01 	bl	80040b8 <xTaskResumeAll>
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000e4c 	.word	0x20000e4c
 8004cc4:	20000e50 	.word	0x20000e50
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d10 <prvGetNextExpireTime+0x44>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf2:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <prvGetNextExpireTime+0x44>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e001      	b.n	8004d02 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000e48 	.word	0x20000e48

08004d14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d1c:	f7ff fa6a 	bl	80041f4 <xTaskGetTickCount>
 8004d20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d22:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <prvSampleTimeNow+0x3c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d205      	bcs.n	8004d38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d2c:	f000 f910 	bl	8004f50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e002      	b.n	8004d3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d3e:	4a04      	ldr	r2, [pc, #16]	@ (8004d50 <prvSampleTimeNow+0x3c>)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d44:	68fb      	ldr	r3, [r7, #12]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000e58 	.word	0x20000e58

08004d54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d812      	bhi.n	8004da0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	1ad2      	subs	r2, r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e01b      	b.n	8004dc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d8e:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <prvInsertTimerInActiveList+0x7c>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fe f9cd 	bl	8003138 <vListInsert>
 8004d9e:	e012      	b.n	8004dc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d206      	bcs.n	8004db6 <prvInsertTimerInActiveList+0x62>
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d302      	bcc.n	8004db6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e007      	b.n	8004dc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004db6:	4b07      	ldr	r3, [pc, #28]	@ (8004dd4 <prvInsertTimerInActiveList+0x80>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7fe f9b9 	bl	8003138 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dc6:	697b      	ldr	r3, [r7, #20]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000e4c 	.word	0x20000e4c
 8004dd4:	20000e48 	.word	0x20000e48

08004dd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08e      	sub	sp, #56	@ 0x38
 8004ddc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dde:	e0a5      	b.n	8004f2c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da19      	bge.n	8004e1a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	3304      	adds	r3, #4
 8004dea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	61fb      	str	r3, [r7, #28]
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	e7fd      	b.n	8004e06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e10:	6850      	ldr	r0, [r2, #4]
 8004e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e14:	6892      	ldr	r2, [r2, #8]
 8004e16:	4611      	mov	r1, r2
 8004e18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f2c0 8085 	blt.w	8004f2c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e30:	3304      	adds	r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe f9b8 	bl	80031a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e38:	463b      	mov	r3, r7
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff ff6a 	bl	8004d14 <prvSampleTimeNow>
 8004e40:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d86c      	bhi.n	8004f22 <prvProcessReceivedCommands+0x14a>
 8004e48:	a201      	add	r2, pc, #4	@ (adr r2, 8004e50 <prvProcessReceivedCommands+0x78>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08004e79 	.word	0x08004e79
 8004e5c:	08004f23 	.word	0x08004f23
 8004e60:	08004ed7 	.word	0x08004ed7
 8004e64:	08004f11 	.word	0x08004f11
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004e79 	.word	0x08004e79
 8004e70:	08004f23 	.word	0x08004f23
 8004e74:	08004ed7 	.word	0x08004ed7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	18d1      	adds	r1, r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e86:	f7ff ff65 	bl	8004d54 <prvInsertTimerInActiveList>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d04a      	beq.n	8004f26 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e96:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d142      	bne.n	8004f26 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	2100      	movs	r1, #0
 8004eb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eb2:	f7ff fe19 	bl	8004ae8 <xTimerGenericCommand>
 8004eb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d133      	bne.n	8004f26 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	61bb      	str	r3, [r7, #24]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	617b      	str	r3, [r7, #20]
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	e7fd      	b.n	8004ef8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	18d1      	adds	r1, r2, r3
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f0a:	f7ff ff23 	bl	8004d54 <prvInsertTimerInActiveList>
					break;
 8004f0e:	e00d      	b.n	8004f2c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f1c:	f000 fb78 	bl	8005610 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f20:	e003      	b.n	8004f2a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004f22:	bf00      	nop
 8004f24:	e002      	b.n	8004f2c <prvProcessReceivedCommands+0x154>
					break;
 8004f26:	bf00      	nop
 8004f28:	e000      	b.n	8004f2c <prvProcessReceivedCommands+0x154>
					break;
 8004f2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f2c:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <prvProcessReceivedCommands+0x174>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	1d39      	adds	r1, r7, #4
 8004f32:	2200      	movs	r2, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fc09 	bl	800374c <xQueueReceive>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f47f af4f 	bne.w	8004de0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	3730      	adds	r7, #48	@ 0x30
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000e50 	.word	0x20000e50

08004f50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f56:	e046      	b.n	8004fe6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f58:	4b2c      	ldr	r3, [pc, #176]	@ (800500c <prvSwitchTimerLists+0xbc>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f62:	4b2a      	ldr	r3, [pc, #168]	@ (800500c <prvSwitchTimerLists+0xbc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe f919 	bl	80031a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d12f      	bne.n	8004fe6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d90e      	bls.n	8004fb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fa4:	4b19      	ldr	r3, [pc, #100]	@ (800500c <prvSwitchTimerLists+0xbc>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f7fe f8c2 	bl	8003138 <vListInsert>
 8004fb4:	e017      	b.n	8004fe6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fd91 	bl	8004ae8 <xTimerGenericCommand>
 8004fc6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <prvSwitchTimerLists+0x96>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	603b      	str	r3, [r7, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fe6:	4b09      	ldr	r3, [pc, #36]	@ (800500c <prvSwitchTimerLists+0xbc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1b3      	bne.n	8004f58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <prvSwitchTimerLists+0xbc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <prvSwitchTimerLists+0xc0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a04      	ldr	r2, [pc, #16]	@ (800500c <prvSwitchTimerLists+0xbc>)
 8004ffc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ffe:	4a04      	ldr	r2, [pc, #16]	@ (8005010 <prvSwitchTimerLists+0xc0>)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	6013      	str	r3, [r2, #0]
}
 8005004:	bf00      	nop
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000e48 	.word	0x20000e48
 8005010:	20000e4c 	.word	0x20000e4c

08005014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800501a:	f000 f92f 	bl	800527c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800501e:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <prvCheckForValidListAndQueue+0x60>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d120      	bne.n	8005068 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005026:	4814      	ldr	r0, [pc, #80]	@ (8005078 <prvCheckForValidListAndQueue+0x64>)
 8005028:	f7fe f838 	bl	800309c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800502c:	4813      	ldr	r0, [pc, #76]	@ (800507c <prvCheckForValidListAndQueue+0x68>)
 800502e:	f7fe f835 	bl	800309c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005032:	4b13      	ldr	r3, [pc, #76]	@ (8005080 <prvCheckForValidListAndQueue+0x6c>)
 8005034:	4a10      	ldr	r2, [pc, #64]	@ (8005078 <prvCheckForValidListAndQueue+0x64>)
 8005036:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005038:	4b12      	ldr	r3, [pc, #72]	@ (8005084 <prvCheckForValidListAndQueue+0x70>)
 800503a:	4a10      	ldr	r2, [pc, #64]	@ (800507c <prvCheckForValidListAndQueue+0x68>)
 800503c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800503e:	2300      	movs	r3, #0
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <prvCheckForValidListAndQueue+0x74>)
 8005044:	4a11      	ldr	r2, [pc, #68]	@ (800508c <prvCheckForValidListAndQueue+0x78>)
 8005046:	2110      	movs	r1, #16
 8005048:	200a      	movs	r0, #10
 800504a:	f7fe f941 	bl	80032d0 <xQueueGenericCreateStatic>
 800504e:	4603      	mov	r3, r0
 8005050:	4a08      	ldr	r2, [pc, #32]	@ (8005074 <prvCheckForValidListAndQueue+0x60>)
 8005052:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005054:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <prvCheckForValidListAndQueue+0x60>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800505c:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <prvCheckForValidListAndQueue+0x60>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	490b      	ldr	r1, [pc, #44]	@ (8005090 <prvCheckForValidListAndQueue+0x7c>)
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fd64 	bl	8003b30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005068:	f000 f938 	bl	80052dc <vPortExitCritical>
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000e50 	.word	0x20000e50
 8005078:	20000e20 	.word	0x20000e20
 800507c:	20000e34 	.word	0x20000e34
 8005080:	20000e48 	.word	0x20000e48
 8005084:	20000e4c 	.word	0x20000e4c
 8005088:	20000efc 	.word	0x20000efc
 800508c:	20000e5c 	.word	0x20000e5c
 8005090:	08006398 	.word	0x08006398

08005094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3b04      	subs	r3, #4
 80050a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3b04      	subs	r3, #4
 80050b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3b04      	subs	r3, #4
 80050c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050c4:	4a08      	ldr	r2, [pc, #32]	@ (80050e8 <pxPortInitialiseStack+0x54>)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3b14      	subs	r3, #20
 80050ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3b20      	subs	r3, #32
 80050da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050dc:	68fb      	ldr	r3, [r7, #12]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr
 80050e8:	080050ed 	.word	0x080050ed

080050ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050f6:	4b12      	ldr	r3, [pc, #72]	@ (8005140 <prvTaskExitError+0x54>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fe:	d00b      	beq.n	8005118 <prvTaskExitError+0x2c>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	60fb      	str	r3, [r7, #12]
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <prvTaskExitError+0x28>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	60bb      	str	r3, [r7, #8]
}
 800512a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800512c:	bf00      	nop
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0fc      	beq.n	800512e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	2000000c 	.word	0x2000000c
	...

08005150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005150:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <pxCurrentTCBConst2>)
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	6808      	ldr	r0, [r1, #0]
 8005156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800515a:	f380 8809 	msr	PSP, r0
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8811 	msr	BASEPRI, r0
 800516a:	f04e 0e0d 	orr.w	lr, lr, #13
 800516e:	4770      	bx	lr

08005170 <pxCurrentTCBConst2>:
 8005170:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop

08005178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005178:	4806      	ldr	r0, [pc, #24]	@ (8005194 <prvPortStartFirstTask+0x1c>)
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	6800      	ldr	r0, [r0, #0]
 800517e:	f380 8808 	msr	MSP, r0
 8005182:	b662      	cpsie	i
 8005184:	b661      	cpsie	f
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	df00      	svc	0
 8005190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005192:	bf00      	nop
 8005194:	e000ed08 	.word	0xe000ed08

08005198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800519e:	4b32      	ldr	r3, [pc, #200]	@ (8005268 <xPortStartScheduler+0xd0>)
 80051a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	22ff      	movs	r2, #255	@ 0xff
 80051ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	4b2a      	ldr	r3, [pc, #168]	@ (800526c <xPortStartScheduler+0xd4>)
 80051c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005270 <xPortStartScheduler+0xd8>)
 80051c8:	2207      	movs	r2, #7
 80051ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051cc:	e009      	b.n	80051e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80051ce:	4b28      	ldr	r3, [pc, #160]	@ (8005270 <xPortStartScheduler+0xd8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	4a26      	ldr	r2, [pc, #152]	@ (8005270 <xPortStartScheduler+0xd8>)
 80051d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b80      	cmp	r3, #128	@ 0x80
 80051ec:	d0ef      	beq.n	80051ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051ee:	4b20      	ldr	r3, [pc, #128]	@ (8005270 <xPortStartScheduler+0xd8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1c3 0307 	rsb	r3, r3, #7
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d00b      	beq.n	8005212 <xPortStartScheduler+0x7a>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	60bb      	str	r3, [r7, #8]
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	e7fd      	b.n	800520e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005212:	4b17      	ldr	r3, [pc, #92]	@ (8005270 <xPortStartScheduler+0xd8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <xPortStartScheduler+0xd8>)
 800521a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800521c:	4b14      	ldr	r3, [pc, #80]	@ (8005270 <xPortStartScheduler+0xd8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005224:	4a12      	ldr	r2, [pc, #72]	@ (8005270 <xPortStartScheduler+0xd8>)
 8005226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	b2da      	uxtb	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005230:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <xPortStartScheduler+0xdc>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a0f      	ldr	r2, [pc, #60]	@ (8005274 <xPortStartScheduler+0xdc>)
 8005236:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800523a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800523c:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <xPortStartScheduler+0xdc>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a0c      	ldr	r2, [pc, #48]	@ (8005274 <xPortStartScheduler+0xdc>)
 8005242:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005248:	f000 f8b8 	bl	80053bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800524c:	4b0a      	ldr	r3, [pc, #40]	@ (8005278 <xPortStartScheduler+0xe0>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005252:	f7ff ff91 	bl	8005178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005256:	f7ff f89b 	bl	8004390 <vTaskSwitchContext>
	prvTaskExitError();
 800525a:	f7ff ff47 	bl	80050ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000e400 	.word	0xe000e400
 800526c:	20000f4c 	.word	0x20000f4c
 8005270:	20000f50 	.word	0x20000f50
 8005274:	e000ed20 	.word	0xe000ed20
 8005278:	2000000c 	.word	0x2000000c

0800527c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	607b      	str	r3, [r7, #4]
}
 8005294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005296:	4b0f      	ldr	r3, [pc, #60]	@ (80052d4 <vPortEnterCritical+0x58>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3301      	adds	r3, #1
 800529c:	4a0d      	ldr	r2, [pc, #52]	@ (80052d4 <vPortEnterCritical+0x58>)
 800529e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052a0:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <vPortEnterCritical+0x58>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d110      	bne.n	80052ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052a8:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <vPortEnterCritical+0x5c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <vPortEnterCritical+0x4e>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	603b      	str	r3, [r7, #0]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <vPortEnterCritical+0x4a>
	}
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	2000000c 	.word	0x2000000c
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052e2:	4b12      	ldr	r3, [pc, #72]	@ (800532c <vPortExitCritical+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <vPortExitCritical+0x26>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	e7fd      	b.n	80052fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005302:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <vPortExitCritical+0x50>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3b01      	subs	r3, #1
 8005308:	4a08      	ldr	r2, [pc, #32]	@ (800532c <vPortExitCritical+0x50>)
 800530a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800530c:	4b07      	ldr	r3, [pc, #28]	@ (800532c <vPortExitCritical+0x50>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <vPortExitCritical+0x44>
 8005314:	2300      	movs	r3, #0
 8005316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	2000000c 	.word	0x2000000c

08005330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005330:	f3ef 8009 	mrs	r0, PSP
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <pxCurrentTCBConst>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005340:	6010      	str	r0, [r2, #0]
 8005342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005346:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800534a:	f380 8811 	msr	BASEPRI, r0
 800534e:	f7ff f81f 	bl	8004390 <vTaskSwitchContext>
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	6808      	ldr	r0, [r1, #0]
 8005362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005366:	f380 8809 	msr	PSP, r0
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	4770      	bx	lr

08005370 <pxCurrentTCBConst>:
 8005370:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
}
 8005390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005392:	f7fe ff3d 	bl	8004210 <xTaskIncrementTick>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800539c:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <SysTick_Handler+0x40>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f383 8811 	msr	BASEPRI, r3
}
 80053ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053c0:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <vPortSetupTimerInterrupt+0x30>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053c6:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053cc:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <vPortSetupTimerInterrupt+0x38>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a09      	ldr	r2, [pc, #36]	@ (80053f8 <vPortSetupTimerInterrupt+0x3c>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	4a08      	ldr	r2, [pc, #32]	@ (80053fc <vPortSetupTimerInterrupt+0x40>)
 80053da:	3b01      	subs	r3, #1
 80053dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053de:	4b03      	ldr	r3, [pc, #12]	@ (80053ec <vPortSetupTimerInterrupt+0x30>)
 80053e0:	2207      	movs	r2, #7
 80053e2:	601a      	str	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	e000e010 	.word	0xe000e010
 80053f0:	e000e018 	.word	0xe000e018
 80053f4:	20000000 	.word	0x20000000
 80053f8:	10624dd3 	.word	0x10624dd3
 80053fc:	e000e014 	.word	0xe000e014

08005400 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005406:	f3ef 8305 	mrs	r3, IPSR
 800540a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d915      	bls.n	800543e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005412:	4a17      	ldr	r2, [pc, #92]	@ (8005470 <vPortValidateInterruptPriority+0x70>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800541c:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <vPortValidateInterruptPriority+0x74>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	7afa      	ldrb	r2, [r7, #11]
 8005422:	429a      	cmp	r2, r3
 8005424:	d20b      	bcs.n	800543e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	607b      	str	r3, [r7, #4]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800543e:	4b0e      	ldr	r3, [pc, #56]	@ (8005478 <vPortValidateInterruptPriority+0x78>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005446:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <vPortValidateInterruptPriority+0x7c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d90b      	bls.n	8005466 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	603b      	str	r3, [r7, #0]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <vPortValidateInterruptPriority+0x62>
	}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr
 8005470:	e000e3f0 	.word	0xe000e3f0
 8005474:	20000f4c 	.word	0x20000f4c
 8005478:	e000ed0c 	.word	0xe000ed0c
 800547c:	20000f50 	.word	0x20000f50

08005480 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800548c:	f7fe fe06 	bl	800409c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005490:	4b5a      	ldr	r3, [pc, #360]	@ (80055fc <pvPortMalloc+0x17c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005498:	f000 f916 	bl	80056c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800549c:	4b58      	ldr	r3, [pc, #352]	@ (8005600 <pvPortMalloc+0x180>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 8090 	bne.w	80055ca <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01e      	beq.n	80054ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80054b0:	2208      	movs	r2, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d015      	beq.n	80054ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f023 0307 	bic.w	r3, r3, #7
 80054c8:	3308      	adds	r3, #8
 80054ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <pvPortMalloc+0x6e>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	617b      	str	r3, [r7, #20]
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	e7fd      	b.n	80054ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d06a      	beq.n	80055ca <pvPortMalloc+0x14a>
 80054f4:	4b43      	ldr	r3, [pc, #268]	@ (8005604 <pvPortMalloc+0x184>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d865      	bhi.n	80055ca <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054fe:	4b42      	ldr	r3, [pc, #264]	@ (8005608 <pvPortMalloc+0x188>)
 8005500:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005502:	4b41      	ldr	r3, [pc, #260]	@ (8005608 <pvPortMalloc+0x188>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005508:	e004      	b.n	8005514 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	429a      	cmp	r2, r3
 800551c:	d903      	bls.n	8005526 <pvPortMalloc+0xa6>
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f1      	bne.n	800550a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005526:	4b35      	ldr	r3, [pc, #212]	@ (80055fc <pvPortMalloc+0x17c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552c:	429a      	cmp	r2, r3
 800552e:	d04c      	beq.n	80055ca <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2208      	movs	r2, #8
 8005536:	4413      	add	r3, r2
 8005538:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	1ad2      	subs	r2, r2, r3
 800554a:	2308      	movs	r3, #8
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	429a      	cmp	r2, r3
 8005550:	d920      	bls.n	8005594 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4413      	add	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <pvPortMalloc+0xfc>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	613b      	str	r3, [r7, #16]
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	1ad2      	subs	r2, r2, r3
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800558e:	69b8      	ldr	r0, [r7, #24]
 8005590:	f000 f8fc 	bl	800578c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005594:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <pvPortMalloc+0x184>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	4a19      	ldr	r2, [pc, #100]	@ (8005604 <pvPortMalloc+0x184>)
 80055a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055a2:	4b18      	ldr	r3, [pc, #96]	@ (8005604 <pvPortMalloc+0x184>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b19      	ldr	r3, [pc, #100]	@ (800560c <pvPortMalloc+0x18c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d203      	bcs.n	80055b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055ae:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <pvPortMalloc+0x184>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a16      	ldr	r2, [pc, #88]	@ (800560c <pvPortMalloc+0x18c>)
 80055b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	4b11      	ldr	r3, [pc, #68]	@ (8005600 <pvPortMalloc+0x180>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	431a      	orrs	r2, r3
 80055c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055ca:	f7fe fd75 	bl	80040b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <pvPortMalloc+0x170>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	60fb      	str	r3, [r7, #12]
}
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
 80055ee:	e7fd      	b.n	80055ec <pvPortMalloc+0x16c>
	return pvReturn;
 80055f0:	69fb      	ldr	r3, [r7, #28]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3728      	adds	r7, #40	@ 0x28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20001d6c 	.word	0x20001d6c
 8005600:	20001d78 	.word	0x20001d78
 8005604:	20001d70 	.word	0x20001d70
 8005608:	20001d64 	.word	0x20001d64
 800560c:	20001d74 	.word	0x20001d74

08005610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d04a      	beq.n	80056b8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005622:	2308      	movs	r3, #8
 8005624:	425b      	negs	r3, r3
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	4b22      	ldr	r3, [pc, #136]	@ (80056c0 <vPortFree+0xb0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <vPortFree+0x46>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	60fb      	str	r3, [r7, #12]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <vPortFree+0x66>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60bb      	str	r3, [r7, #8]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	4b11      	ldr	r3, [pc, #68]	@ (80056c0 <vPortFree+0xb0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d019      	beq.n	80056b8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d115      	bne.n	80056b8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <vPortFree+0xb0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	43db      	mvns	r3, r3
 8005696:	401a      	ands	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800569c:	f7fe fcfe 	bl	800409c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <vPortFree+0xb4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4413      	add	r3, r2
 80056aa:	4a06      	ldr	r2, [pc, #24]	@ (80056c4 <vPortFree+0xb4>)
 80056ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ae:	6938      	ldr	r0, [r7, #16]
 80056b0:	f000 f86c 	bl	800578c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056b4:	f7fe fd00 	bl	80040b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056b8:	bf00      	nop
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20001d78 	.word	0x20001d78
 80056c4:	20001d70 	.word	0x20001d70

080056c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ce:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80056d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056d4:	4b27      	ldr	r3, [pc, #156]	@ (8005774 <prvHeapInit+0xac>)
 80056d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00c      	beq.n	80056fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3307      	adds	r3, #7
 80056e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0307 	bic.w	r3, r3, #7
 80056ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005774 <prvHeapInit+0xac>)
 80056f8:	4413      	add	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005700:	4a1d      	ldr	r2, [pc, #116]	@ (8005778 <prvHeapInit+0xb0>)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005706:	4b1c      	ldr	r3, [pc, #112]	@ (8005778 <prvHeapInit+0xb0>)
 8005708:	2200      	movs	r2, #0
 800570a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4413      	add	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005714:	2208      	movs	r2, #8
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0307 	bic.w	r3, r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a15      	ldr	r2, [pc, #84]	@ (800577c <prvHeapInit+0xb4>)
 8005728:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800572a:	4b14      	ldr	r3, [pc, #80]	@ (800577c <prvHeapInit+0xb4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005732:	4b12      	ldr	r3, [pc, #72]	@ (800577c <prvHeapInit+0xb4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <prvHeapInit+0xb4>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4a0a      	ldr	r2, [pc, #40]	@ (8005780 <prvHeapInit+0xb8>)
 8005756:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4a09      	ldr	r2, [pc, #36]	@ (8005784 <prvHeapInit+0xbc>)
 800575e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005760:	4b09      	ldr	r3, [pc, #36]	@ (8005788 <prvHeapInit+0xc0>)
 8005762:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005766:	601a      	str	r2, [r3, #0]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000f54 	.word	0x20000f54
 8005778:	20001d64 	.word	0x20001d64
 800577c:	20001d6c 	.word	0x20001d6c
 8005780:	20001d74 	.word	0x20001d74
 8005784:	20001d70 	.word	0x20001d70
 8005788:	20001d78 	.word	0x20001d78

0800578c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005794:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <prvInsertBlockIntoFreeList+0xa8>)
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e002      	b.n	80057a0 <prvInsertBlockIntoFreeList+0x14>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d8f7      	bhi.n	800579a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4413      	add	r3, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d108      	bne.n	80057ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	441a      	add	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	441a      	add	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d118      	bne.n	8005814 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4b14      	ldr	r3, [pc, #80]	@ (8005838 <prvInsertBlockIntoFreeList+0xac>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d00d      	beq.n	800580a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	e008      	b.n	800581c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800580a:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <prvInsertBlockIntoFreeList+0xac>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e003      	b.n	800581c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d002      	beq.n	800582a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr
 8005834:	20001d64 	.word	0x20001d64
 8005838:	20001d6c 	.word	0x20001d6c

0800583c <siprintf>:
 800583c:	b40e      	push	{r1, r2, r3}
 800583e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005842:	b500      	push	{lr}
 8005844:	b09c      	sub	sp, #112	@ 0x70
 8005846:	ab1d      	add	r3, sp, #116	@ 0x74
 8005848:	9002      	str	r0, [sp, #8]
 800584a:	9006      	str	r0, [sp, #24]
 800584c:	9107      	str	r1, [sp, #28]
 800584e:	9104      	str	r1, [sp, #16]
 8005850:	4808      	ldr	r0, [pc, #32]	@ (8005874 <siprintf+0x38>)
 8005852:	4909      	ldr	r1, [pc, #36]	@ (8005878 <siprintf+0x3c>)
 8005854:	f853 2b04 	ldr.w	r2, [r3], #4
 8005858:	9105      	str	r1, [sp, #20]
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	a902      	add	r1, sp, #8
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	f000 f9f6 	bl	8005c50 <_svfiprintf_r>
 8005864:	2200      	movs	r2, #0
 8005866:	9b02      	ldr	r3, [sp, #8]
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	b01c      	add	sp, #112	@ 0x70
 800586c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005870:	b003      	add	sp, #12
 8005872:	4770      	bx	lr
 8005874:	20000010 	.word	0x20000010
 8005878:	ffff0208 	.word	0xffff0208

0800587c <memset>:
 800587c:	4603      	mov	r3, r0
 800587e:	4402      	add	r2, r0
 8005880:	4293      	cmp	r3, r2
 8005882:	d100      	bne.n	8005886 <memset+0xa>
 8005884:	4770      	bx	lr
 8005886:	f803 1b01 	strb.w	r1, [r3], #1
 800588a:	e7f9      	b.n	8005880 <memset+0x4>

0800588c <_reclaim_reent>:
 800588c:	4b29      	ldr	r3, [pc, #164]	@ (8005934 <_reclaim_reent+0xa8>)
 800588e:	b570      	push	{r4, r5, r6, lr}
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4604      	mov	r4, r0
 8005894:	4283      	cmp	r3, r0
 8005896:	d04b      	beq.n	8005930 <_reclaim_reent+0xa4>
 8005898:	69c3      	ldr	r3, [r0, #28]
 800589a:	b1ab      	cbz	r3, 80058c8 <_reclaim_reent+0x3c>
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	b16b      	cbz	r3, 80058bc <_reclaim_reent+0x30>
 80058a0:	2500      	movs	r5, #0
 80058a2:	69e3      	ldr	r3, [r4, #28]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	5959      	ldr	r1, [r3, r5]
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d13b      	bne.n	8005924 <_reclaim_reent+0x98>
 80058ac:	3504      	adds	r5, #4
 80058ae:	2d80      	cmp	r5, #128	@ 0x80
 80058b0:	d1f7      	bne.n	80058a2 <_reclaim_reent+0x16>
 80058b2:	69e3      	ldr	r3, [r4, #28]
 80058b4:	4620      	mov	r0, r4
 80058b6:	68d9      	ldr	r1, [r3, #12]
 80058b8:	f000 f878 	bl	80059ac <_free_r>
 80058bc:	69e3      	ldr	r3, [r4, #28]
 80058be:	6819      	ldr	r1, [r3, #0]
 80058c0:	b111      	cbz	r1, 80058c8 <_reclaim_reent+0x3c>
 80058c2:	4620      	mov	r0, r4
 80058c4:	f000 f872 	bl	80059ac <_free_r>
 80058c8:	6961      	ldr	r1, [r4, #20]
 80058ca:	b111      	cbz	r1, 80058d2 <_reclaim_reent+0x46>
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 f86d 	bl	80059ac <_free_r>
 80058d2:	69e1      	ldr	r1, [r4, #28]
 80058d4:	b111      	cbz	r1, 80058dc <_reclaim_reent+0x50>
 80058d6:	4620      	mov	r0, r4
 80058d8:	f000 f868 	bl	80059ac <_free_r>
 80058dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80058de:	b111      	cbz	r1, 80058e6 <_reclaim_reent+0x5a>
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 f863 	bl	80059ac <_free_r>
 80058e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058e8:	b111      	cbz	r1, 80058f0 <_reclaim_reent+0x64>
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 f85e 	bl	80059ac <_free_r>
 80058f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80058f2:	b111      	cbz	r1, 80058fa <_reclaim_reent+0x6e>
 80058f4:	4620      	mov	r0, r4
 80058f6:	f000 f859 	bl	80059ac <_free_r>
 80058fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80058fc:	b111      	cbz	r1, 8005904 <_reclaim_reent+0x78>
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 f854 	bl	80059ac <_free_r>
 8005904:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005906:	b111      	cbz	r1, 800590e <_reclaim_reent+0x82>
 8005908:	4620      	mov	r0, r4
 800590a:	f000 f84f 	bl	80059ac <_free_r>
 800590e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005910:	b111      	cbz	r1, 8005918 <_reclaim_reent+0x8c>
 8005912:	4620      	mov	r0, r4
 8005914:	f000 f84a 	bl	80059ac <_free_r>
 8005918:	6a23      	ldr	r3, [r4, #32]
 800591a:	b14b      	cbz	r3, 8005930 <_reclaim_reent+0xa4>
 800591c:	4620      	mov	r0, r4
 800591e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005922:	4718      	bx	r3
 8005924:	680e      	ldr	r6, [r1, #0]
 8005926:	4620      	mov	r0, r4
 8005928:	f000 f840 	bl	80059ac <_free_r>
 800592c:	4631      	mov	r1, r6
 800592e:	e7bb      	b.n	80058a8 <_reclaim_reent+0x1c>
 8005930:	bd70      	pop	{r4, r5, r6, pc}
 8005932:	bf00      	nop
 8005934:	20000010 	.word	0x20000010

08005938 <__errno>:
 8005938:	4b01      	ldr	r3, [pc, #4]	@ (8005940 <__errno+0x8>)
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	20000010 	.word	0x20000010

08005944 <__libc_init_array>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	2600      	movs	r6, #0
 8005948:	4d0c      	ldr	r5, [pc, #48]	@ (800597c <__libc_init_array+0x38>)
 800594a:	4c0d      	ldr	r4, [pc, #52]	@ (8005980 <__libc_init_array+0x3c>)
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	42a6      	cmp	r6, r4
 8005952:	d109      	bne.n	8005968 <__libc_init_array+0x24>
 8005954:	f000 fc78 	bl	8006248 <_init>
 8005958:	2600      	movs	r6, #0
 800595a:	4d0a      	ldr	r5, [pc, #40]	@ (8005984 <__libc_init_array+0x40>)
 800595c:	4c0a      	ldr	r4, [pc, #40]	@ (8005988 <__libc_init_array+0x44>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	42a6      	cmp	r6, r4
 8005964:	d105      	bne.n	8005972 <__libc_init_array+0x2e>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	f855 3b04 	ldr.w	r3, [r5], #4
 800596c:	4798      	blx	r3
 800596e:	3601      	adds	r6, #1
 8005970:	e7ee      	b.n	8005950 <__libc_init_array+0xc>
 8005972:	f855 3b04 	ldr.w	r3, [r5], #4
 8005976:	4798      	blx	r3
 8005978:	3601      	adds	r6, #1
 800597a:	e7f2      	b.n	8005962 <__libc_init_array+0x1e>
 800597c:	080064a0 	.word	0x080064a0
 8005980:	080064a0 	.word	0x080064a0
 8005984:	080064a0 	.word	0x080064a0
 8005988:	080064a4 	.word	0x080064a4

0800598c <__retarget_lock_acquire_recursive>:
 800598c:	4770      	bx	lr

0800598e <__retarget_lock_release_recursive>:
 800598e:	4770      	bx	lr

08005990 <memcpy>:
 8005990:	440a      	add	r2, r1
 8005992:	4291      	cmp	r1, r2
 8005994:	f100 33ff 	add.w	r3, r0, #4294967295
 8005998:	d100      	bne.n	800599c <memcpy+0xc>
 800599a:	4770      	bx	lr
 800599c:	b510      	push	{r4, lr}
 800599e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a2:	4291      	cmp	r1, r2
 80059a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a8:	d1f9      	bne.n	800599e <memcpy+0xe>
 80059aa:	bd10      	pop	{r4, pc}

080059ac <_free_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4605      	mov	r5, r0
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d040      	beq.n	8005a36 <_free_r+0x8a>
 80059b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b8:	1f0c      	subs	r4, r1, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bfb8      	it	lt
 80059be:	18e4      	addlt	r4, r4, r3
 80059c0:	f000 f8de 	bl	8005b80 <__malloc_lock>
 80059c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <_free_r+0x8c>)
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	b933      	cbnz	r3, 80059d8 <_free_r+0x2c>
 80059ca:	6063      	str	r3, [r4, #4]
 80059cc:	6014      	str	r4, [r2, #0]
 80059ce:	4628      	mov	r0, r5
 80059d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059d4:	f000 b8da 	b.w	8005b8c <__malloc_unlock>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d908      	bls.n	80059ee <_free_r+0x42>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	1821      	adds	r1, r4, r0
 80059e0:	428b      	cmp	r3, r1
 80059e2:	bf01      	itttt	eq
 80059e4:	6819      	ldreq	r1, [r3, #0]
 80059e6:	685b      	ldreq	r3, [r3, #4]
 80059e8:	1809      	addeq	r1, r1, r0
 80059ea:	6021      	streq	r1, [r4, #0]
 80059ec:	e7ed      	b.n	80059ca <_free_r+0x1e>
 80059ee:	461a      	mov	r2, r3
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b10b      	cbz	r3, 80059f8 <_free_r+0x4c>
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d9fa      	bls.n	80059ee <_free_r+0x42>
 80059f8:	6811      	ldr	r1, [r2, #0]
 80059fa:	1850      	adds	r0, r2, r1
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d10b      	bne.n	8005a18 <_free_r+0x6c>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	4401      	add	r1, r0
 8005a04:	1850      	adds	r0, r2, r1
 8005a06:	4283      	cmp	r3, r0
 8005a08:	6011      	str	r1, [r2, #0]
 8005a0a:	d1e0      	bne.n	80059ce <_free_r+0x22>
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4408      	add	r0, r1
 8005a12:	6010      	str	r0, [r2, #0]
 8005a14:	6053      	str	r3, [r2, #4]
 8005a16:	e7da      	b.n	80059ce <_free_r+0x22>
 8005a18:	d902      	bls.n	8005a20 <_free_r+0x74>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	e7d6      	b.n	80059ce <_free_r+0x22>
 8005a20:	6820      	ldr	r0, [r4, #0]
 8005a22:	1821      	adds	r1, r4, r0
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf01      	itttt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	1809      	addeq	r1, r1, r0
 8005a2e:	6021      	streq	r1, [r4, #0]
 8005a30:	6063      	str	r3, [r4, #4]
 8005a32:	6054      	str	r4, [r2, #4]
 8005a34:	e7cb      	b.n	80059ce <_free_r+0x22>
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	20001ec0 	.word	0x20001ec0

08005a3c <sbrk_aligned>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005a7c <sbrk_aligned+0x40>)
 8005a40:	460c      	mov	r4, r1
 8005a42:	6831      	ldr	r1, [r6, #0]
 8005a44:	4605      	mov	r5, r0
 8005a46:	b911      	cbnz	r1, 8005a4e <sbrk_aligned+0x12>
 8005a48:	f000 fbaa 	bl	80061a0 <_sbrk_r>
 8005a4c:	6030      	str	r0, [r6, #0]
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4628      	mov	r0, r5
 8005a52:	f000 fba5 	bl	80061a0 <_sbrk_r>
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	d103      	bne.n	8005a62 <sbrk_aligned+0x26>
 8005a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8005a5e:	4620      	mov	r0, r4
 8005a60:	bd70      	pop	{r4, r5, r6, pc}
 8005a62:	1cc4      	adds	r4, r0, #3
 8005a64:	f024 0403 	bic.w	r4, r4, #3
 8005a68:	42a0      	cmp	r0, r4
 8005a6a:	d0f8      	beq.n	8005a5e <sbrk_aligned+0x22>
 8005a6c:	1a21      	subs	r1, r4, r0
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 fb96 	bl	80061a0 <_sbrk_r>
 8005a74:	3001      	adds	r0, #1
 8005a76:	d1f2      	bne.n	8005a5e <sbrk_aligned+0x22>
 8005a78:	e7ef      	b.n	8005a5a <sbrk_aligned+0x1e>
 8005a7a:	bf00      	nop
 8005a7c:	20001ebc 	.word	0x20001ebc

08005a80 <_malloc_r>:
 8005a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a84:	1ccd      	adds	r5, r1, #3
 8005a86:	f025 0503 	bic.w	r5, r5, #3
 8005a8a:	3508      	adds	r5, #8
 8005a8c:	2d0c      	cmp	r5, #12
 8005a8e:	bf38      	it	cc
 8005a90:	250c      	movcc	r5, #12
 8005a92:	2d00      	cmp	r5, #0
 8005a94:	4606      	mov	r6, r0
 8005a96:	db01      	blt.n	8005a9c <_malloc_r+0x1c>
 8005a98:	42a9      	cmp	r1, r5
 8005a9a:	d904      	bls.n	8005aa6 <_malloc_r+0x26>
 8005a9c:	230c      	movs	r3, #12
 8005a9e:	6033      	str	r3, [r6, #0]
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b7c <_malloc_r+0xfc>
 8005aaa:	f000 f869 	bl	8005b80 <__malloc_lock>
 8005aae:	f8d8 3000 	ldr.w	r3, [r8]
 8005ab2:	461c      	mov	r4, r3
 8005ab4:	bb44      	cbnz	r4, 8005b08 <_malloc_r+0x88>
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f7ff ffbf 	bl	8005a3c <sbrk_aligned>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	d158      	bne.n	8005b76 <_malloc_r+0xf6>
 8005ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ac8:	4627      	mov	r7, r4
 8005aca:	2f00      	cmp	r7, #0
 8005acc:	d143      	bne.n	8005b56 <_malloc_r+0xd6>
 8005ace:	2c00      	cmp	r4, #0
 8005ad0:	d04b      	beq.n	8005b6a <_malloc_r+0xea>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	4639      	mov	r1, r7
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	eb04 0903 	add.w	r9, r4, r3
 8005adc:	f000 fb60 	bl	80061a0 <_sbrk_r>
 8005ae0:	4581      	cmp	r9, r0
 8005ae2:	d142      	bne.n	8005b6a <_malloc_r+0xea>
 8005ae4:	6821      	ldr	r1, [r4, #0]
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	1a6d      	subs	r5, r5, r1
 8005aea:	4629      	mov	r1, r5
 8005aec:	f7ff ffa6 	bl	8005a3c <sbrk_aligned>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d03a      	beq.n	8005b6a <_malloc_r+0xea>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	442b      	add	r3, r5
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	f8d8 3000 	ldr.w	r3, [r8]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	bb62      	cbnz	r2, 8005b5c <_malloc_r+0xdc>
 8005b02:	f8c8 7000 	str.w	r7, [r8]
 8005b06:	e00f      	b.n	8005b28 <_malloc_r+0xa8>
 8005b08:	6822      	ldr	r2, [r4, #0]
 8005b0a:	1b52      	subs	r2, r2, r5
 8005b0c:	d420      	bmi.n	8005b50 <_malloc_r+0xd0>
 8005b0e:	2a0b      	cmp	r2, #11
 8005b10:	d917      	bls.n	8005b42 <_malloc_r+0xc2>
 8005b12:	1961      	adds	r1, r4, r5
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	6025      	str	r5, [r4, #0]
 8005b18:	bf18      	it	ne
 8005b1a:	6059      	strne	r1, [r3, #4]
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	bf08      	it	eq
 8005b20:	f8c8 1000 	streq.w	r1, [r8]
 8005b24:	5162      	str	r2, [r4, r5]
 8005b26:	604b      	str	r3, [r1, #4]
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f000 f82f 	bl	8005b8c <__malloc_unlock>
 8005b2e:	f104 000b 	add.w	r0, r4, #11
 8005b32:	1d23      	adds	r3, r4, #4
 8005b34:	f020 0007 	bic.w	r0, r0, #7
 8005b38:	1ac2      	subs	r2, r0, r3
 8005b3a:	bf1c      	itt	ne
 8005b3c:	1a1b      	subne	r3, r3, r0
 8005b3e:	50a3      	strne	r3, [r4, r2]
 8005b40:	e7af      	b.n	8005aa2 <_malloc_r+0x22>
 8005b42:	6862      	ldr	r2, [r4, #4]
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	bf0c      	ite	eq
 8005b48:	f8c8 2000 	streq.w	r2, [r8]
 8005b4c:	605a      	strne	r2, [r3, #4]
 8005b4e:	e7eb      	b.n	8005b28 <_malloc_r+0xa8>
 8005b50:	4623      	mov	r3, r4
 8005b52:	6864      	ldr	r4, [r4, #4]
 8005b54:	e7ae      	b.n	8005ab4 <_malloc_r+0x34>
 8005b56:	463c      	mov	r4, r7
 8005b58:	687f      	ldr	r7, [r7, #4]
 8005b5a:	e7b6      	b.n	8005aca <_malloc_r+0x4a>
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	d1fb      	bne.n	8005b5c <_malloc_r+0xdc>
 8005b64:	2300      	movs	r3, #0
 8005b66:	6053      	str	r3, [r2, #4]
 8005b68:	e7de      	b.n	8005b28 <_malloc_r+0xa8>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	6033      	str	r3, [r6, #0]
 8005b70:	f000 f80c 	bl	8005b8c <__malloc_unlock>
 8005b74:	e794      	b.n	8005aa0 <_malloc_r+0x20>
 8005b76:	6005      	str	r5, [r0, #0]
 8005b78:	e7d6      	b.n	8005b28 <_malloc_r+0xa8>
 8005b7a:	bf00      	nop
 8005b7c:	20001ec0 	.word	0x20001ec0

08005b80 <__malloc_lock>:
 8005b80:	4801      	ldr	r0, [pc, #4]	@ (8005b88 <__malloc_lock+0x8>)
 8005b82:	f7ff bf03 	b.w	800598c <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	20001eb8 	.word	0x20001eb8

08005b8c <__malloc_unlock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	@ (8005b94 <__malloc_unlock+0x8>)
 8005b8e:	f7ff befe 	b.w	800598e <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	20001eb8 	.word	0x20001eb8

08005b98 <__ssputs_r>:
 8005b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b9c:	461f      	mov	r7, r3
 8005b9e:	688e      	ldr	r6, [r1, #8]
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	42be      	cmp	r6, r7
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	4690      	mov	r8, r2
 8005ba8:	680b      	ldr	r3, [r1, #0]
 8005baa:	d82d      	bhi.n	8005c08 <__ssputs_r+0x70>
 8005bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005bb4:	d026      	beq.n	8005c04 <__ssputs_r+0x6c>
 8005bb6:	6965      	ldr	r5, [r4, #20]
 8005bb8:	6909      	ldr	r1, [r1, #16]
 8005bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bbe:	eba3 0901 	sub.w	r9, r3, r1
 8005bc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bc6:	1c7b      	adds	r3, r7, #1
 8005bc8:	444b      	add	r3, r9
 8005bca:	106d      	asrs	r5, r5, #1
 8005bcc:	429d      	cmp	r5, r3
 8005bce:	bf38      	it	cc
 8005bd0:	461d      	movcc	r5, r3
 8005bd2:	0553      	lsls	r3, r2, #21
 8005bd4:	d527      	bpl.n	8005c26 <__ssputs_r+0x8e>
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7ff ff52 	bl	8005a80 <_malloc_r>
 8005bdc:	4606      	mov	r6, r0
 8005bde:	b360      	cbz	r0, 8005c3a <__ssputs_r+0xa2>
 8005be0:	464a      	mov	r2, r9
 8005be2:	6921      	ldr	r1, [r4, #16]
 8005be4:	f7ff fed4 	bl	8005990 <memcpy>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf2:	81a3      	strh	r3, [r4, #12]
 8005bf4:	6126      	str	r6, [r4, #16]
 8005bf6:	444e      	add	r6, r9
 8005bf8:	6026      	str	r6, [r4, #0]
 8005bfa:	463e      	mov	r6, r7
 8005bfc:	6165      	str	r5, [r4, #20]
 8005bfe:	eba5 0509 	sub.w	r5, r5, r9
 8005c02:	60a5      	str	r5, [r4, #8]
 8005c04:	42be      	cmp	r6, r7
 8005c06:	d900      	bls.n	8005c0a <__ssputs_r+0x72>
 8005c08:	463e      	mov	r6, r7
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	6820      	ldr	r0, [r4, #0]
 8005c10:	f000 faac 	bl	800616c <memmove>
 8005c14:	2000      	movs	r0, #0
 8005c16:	68a3      	ldr	r3, [r4, #8]
 8005c18:	1b9b      	subs	r3, r3, r6
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	4433      	add	r3, r6
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c26:	462a      	mov	r2, r5
 8005c28:	f000 fad8 	bl	80061dc <_realloc_r>
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d1e0      	bne.n	8005bf4 <__ssputs_r+0x5c>
 8005c32:	4650      	mov	r0, sl
 8005c34:	6921      	ldr	r1, [r4, #16]
 8005c36:	f7ff feb9 	bl	80059ac <_free_r>
 8005c3a:	230c      	movs	r3, #12
 8005c3c:	f8ca 3000 	str.w	r3, [sl]
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295
 8005c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c4a:	81a3      	strh	r3, [r4, #12]
 8005c4c:	e7e9      	b.n	8005c22 <__ssputs_r+0x8a>
	...

08005c50 <_svfiprintf_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	4698      	mov	r8, r3
 8005c56:	898b      	ldrh	r3, [r1, #12]
 8005c58:	4607      	mov	r7, r0
 8005c5a:	061b      	lsls	r3, r3, #24
 8005c5c:	460d      	mov	r5, r1
 8005c5e:	4614      	mov	r4, r2
 8005c60:	b09d      	sub	sp, #116	@ 0x74
 8005c62:	d510      	bpl.n	8005c86 <_svfiprintf_r+0x36>
 8005c64:	690b      	ldr	r3, [r1, #16]
 8005c66:	b973      	cbnz	r3, 8005c86 <_svfiprintf_r+0x36>
 8005c68:	2140      	movs	r1, #64	@ 0x40
 8005c6a:	f7ff ff09 	bl	8005a80 <_malloc_r>
 8005c6e:	6028      	str	r0, [r5, #0]
 8005c70:	6128      	str	r0, [r5, #16]
 8005c72:	b930      	cbnz	r0, 8005c82 <_svfiprintf_r+0x32>
 8005c74:	230c      	movs	r3, #12
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	b01d      	add	sp, #116	@ 0x74
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	2340      	movs	r3, #64	@ 0x40
 8005c84:	616b      	str	r3, [r5, #20]
 8005c86:	2300      	movs	r3, #0
 8005c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c8a:	2320      	movs	r3, #32
 8005c8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c90:	2330      	movs	r3, #48	@ 0x30
 8005c92:	f04f 0901 	mov.w	r9, #1
 8005c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005e34 <_svfiprintf_r+0x1e4>
 8005c9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	469a      	mov	sl, r3
 8005ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005caa:	b10a      	cbz	r2, 8005cb0 <_svfiprintf_r+0x60>
 8005cac:	2a25      	cmp	r2, #37	@ 0x25
 8005cae:	d1f9      	bne.n	8005ca4 <_svfiprintf_r+0x54>
 8005cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8005cb4:	d00b      	beq.n	8005cce <_svfiprintf_r+0x7e>
 8005cb6:	465b      	mov	r3, fp
 8005cb8:	4622      	mov	r2, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	f7ff ff6b 	bl	8005b98 <__ssputs_r>
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f000 80a7 	beq.w	8005e16 <_svfiprintf_r+0x1c6>
 8005cc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cca:	445a      	add	r2, fp
 8005ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cce:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 809f 	beq.w	8005e16 <_svfiprintf_r+0x1c6>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f04f 32ff 	mov.w	r2, #4294967295
 8005cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ce2:	f10a 0a01 	add.w	sl, sl, #1
 8005ce6:	9304      	str	r3, [sp, #16]
 8005ce8:	9307      	str	r3, [sp, #28]
 8005cea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cf0:	4654      	mov	r4, sl
 8005cf2:	2205      	movs	r2, #5
 8005cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf8:	484e      	ldr	r0, [pc, #312]	@ (8005e34 <_svfiprintf_r+0x1e4>)
 8005cfa:	f000 fa61 	bl	80061c0 <memchr>
 8005cfe:	9a04      	ldr	r2, [sp, #16]
 8005d00:	b9d8      	cbnz	r0, 8005d3a <_svfiprintf_r+0xea>
 8005d02:	06d0      	lsls	r0, r2, #27
 8005d04:	bf44      	itt	mi
 8005d06:	2320      	movmi	r3, #32
 8005d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d0c:	0711      	lsls	r1, r2, #28
 8005d0e:	bf44      	itt	mi
 8005d10:	232b      	movmi	r3, #43	@ 0x2b
 8005d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d16:	f89a 3000 	ldrb.w	r3, [sl]
 8005d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d1c:	d015      	beq.n	8005d4a <_svfiprintf_r+0xfa>
 8005d1e:	4654      	mov	r4, sl
 8005d20:	2000      	movs	r0, #0
 8005d22:	f04f 0c0a 	mov.w	ip, #10
 8005d26:	9a07      	ldr	r2, [sp, #28]
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d2e:	3b30      	subs	r3, #48	@ 0x30
 8005d30:	2b09      	cmp	r3, #9
 8005d32:	d94b      	bls.n	8005dcc <_svfiprintf_r+0x17c>
 8005d34:	b1b0      	cbz	r0, 8005d64 <_svfiprintf_r+0x114>
 8005d36:	9207      	str	r2, [sp, #28]
 8005d38:	e014      	b.n	8005d64 <_svfiprintf_r+0x114>
 8005d3a:	eba0 0308 	sub.w	r3, r0, r8
 8005d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d42:	4313      	orrs	r3, r2
 8005d44:	46a2      	mov	sl, r4
 8005d46:	9304      	str	r3, [sp, #16]
 8005d48:	e7d2      	b.n	8005cf0 <_svfiprintf_r+0xa0>
 8005d4a:	9b03      	ldr	r3, [sp, #12]
 8005d4c:	1d19      	adds	r1, r3, #4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	9103      	str	r1, [sp, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bfbb      	ittet	lt
 8005d56:	425b      	neglt	r3, r3
 8005d58:	f042 0202 	orrlt.w	r2, r2, #2
 8005d5c:	9307      	strge	r3, [sp, #28]
 8005d5e:	9307      	strlt	r3, [sp, #28]
 8005d60:	bfb8      	it	lt
 8005d62:	9204      	strlt	r2, [sp, #16]
 8005d64:	7823      	ldrb	r3, [r4, #0]
 8005d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d68:	d10a      	bne.n	8005d80 <_svfiprintf_r+0x130>
 8005d6a:	7863      	ldrb	r3, [r4, #1]
 8005d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d6e:	d132      	bne.n	8005dd6 <_svfiprintf_r+0x186>
 8005d70:	9b03      	ldr	r3, [sp, #12]
 8005d72:	3402      	adds	r4, #2
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	9203      	str	r2, [sp, #12]
 8005d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d7e:	9305      	str	r3, [sp, #20]
 8005d80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005e38 <_svfiprintf_r+0x1e8>
 8005d84:	2203      	movs	r2, #3
 8005d86:	4650      	mov	r0, sl
 8005d88:	7821      	ldrb	r1, [r4, #0]
 8005d8a:	f000 fa19 	bl	80061c0 <memchr>
 8005d8e:	b138      	cbz	r0, 8005da0 <_svfiprintf_r+0x150>
 8005d90:	2240      	movs	r2, #64	@ 0x40
 8005d92:	9b04      	ldr	r3, [sp, #16]
 8005d94:	eba0 000a 	sub.w	r0, r0, sl
 8005d98:	4082      	lsls	r2, r0
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	3401      	adds	r4, #1
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da4:	2206      	movs	r2, #6
 8005da6:	4825      	ldr	r0, [pc, #148]	@ (8005e3c <_svfiprintf_r+0x1ec>)
 8005da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dac:	f000 fa08 	bl	80061c0 <memchr>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d036      	beq.n	8005e22 <_svfiprintf_r+0x1d2>
 8005db4:	4b22      	ldr	r3, [pc, #136]	@ (8005e40 <_svfiprintf_r+0x1f0>)
 8005db6:	bb1b      	cbnz	r3, 8005e00 <_svfiprintf_r+0x1b0>
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	3307      	adds	r3, #7
 8005dbc:	f023 0307 	bic.w	r3, r3, #7
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	9303      	str	r3, [sp, #12]
 8005dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc6:	4433      	add	r3, r6
 8005dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dca:	e76a      	b.n	8005ca2 <_svfiprintf_r+0x52>
 8005dcc:	460c      	mov	r4, r1
 8005dce:	2001      	movs	r0, #1
 8005dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dd4:	e7a8      	b.n	8005d28 <_svfiprintf_r+0xd8>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f04f 0c0a 	mov.w	ip, #10
 8005ddc:	4619      	mov	r1, r3
 8005dde:	3401      	adds	r4, #1
 8005de0:	9305      	str	r3, [sp, #20]
 8005de2:	4620      	mov	r0, r4
 8005de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de8:	3a30      	subs	r2, #48	@ 0x30
 8005dea:	2a09      	cmp	r2, #9
 8005dec:	d903      	bls.n	8005df6 <_svfiprintf_r+0x1a6>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0c6      	beq.n	8005d80 <_svfiprintf_r+0x130>
 8005df2:	9105      	str	r1, [sp, #20]
 8005df4:	e7c4      	b.n	8005d80 <_svfiprintf_r+0x130>
 8005df6:	4604      	mov	r4, r0
 8005df8:	2301      	movs	r3, #1
 8005dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dfe:	e7f0      	b.n	8005de2 <_svfiprintf_r+0x192>
 8005e00:	ab03      	add	r3, sp, #12
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	462a      	mov	r2, r5
 8005e06:	4638      	mov	r0, r7
 8005e08:	4b0e      	ldr	r3, [pc, #56]	@ (8005e44 <_svfiprintf_r+0x1f4>)
 8005e0a:	a904      	add	r1, sp, #16
 8005e0c:	f3af 8000 	nop.w
 8005e10:	1c42      	adds	r2, r0, #1
 8005e12:	4606      	mov	r6, r0
 8005e14:	d1d6      	bne.n	8005dc4 <_svfiprintf_r+0x174>
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	065b      	lsls	r3, r3, #25
 8005e1a:	f53f af2d 	bmi.w	8005c78 <_svfiprintf_r+0x28>
 8005e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e20:	e72c      	b.n	8005c7c <_svfiprintf_r+0x2c>
 8005e22:	ab03      	add	r3, sp, #12
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	462a      	mov	r2, r5
 8005e28:	4638      	mov	r0, r7
 8005e2a:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <_svfiprintf_r+0x1f4>)
 8005e2c:	a904      	add	r1, sp, #16
 8005e2e:	f000 f87d 	bl	8005f2c <_printf_i>
 8005e32:	e7ed      	b.n	8005e10 <_svfiprintf_r+0x1c0>
 8005e34:	0800646c 	.word	0x0800646c
 8005e38:	08006472 	.word	0x08006472
 8005e3c:	08006476 	.word	0x08006476
 8005e40:	00000000 	.word	0x00000000
 8005e44:	08005b99 	.word	0x08005b99

08005e48 <_printf_common>:
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	4698      	mov	r8, r3
 8005e50:	688a      	ldr	r2, [r1, #8]
 8005e52:	690b      	ldr	r3, [r1, #16]
 8005e54:	4607      	mov	r7, r0
 8005e56:	4293      	cmp	r3, r2
 8005e58:	bfb8      	it	lt
 8005e5a:	4613      	movlt	r3, r2
 8005e5c:	6033      	str	r3, [r6, #0]
 8005e5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e62:	460c      	mov	r4, r1
 8005e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e68:	b10a      	cbz	r2, 8005e6e <_printf_common+0x26>
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	6033      	str	r3, [r6, #0]
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	0699      	lsls	r1, r3, #26
 8005e72:	bf42      	ittt	mi
 8005e74:	6833      	ldrmi	r3, [r6, #0]
 8005e76:	3302      	addmi	r3, #2
 8005e78:	6033      	strmi	r3, [r6, #0]
 8005e7a:	6825      	ldr	r5, [r4, #0]
 8005e7c:	f015 0506 	ands.w	r5, r5, #6
 8005e80:	d106      	bne.n	8005e90 <_printf_common+0x48>
 8005e82:	f104 0a19 	add.w	sl, r4, #25
 8005e86:	68e3      	ldr	r3, [r4, #12]
 8005e88:	6832      	ldr	r2, [r6, #0]
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	42ab      	cmp	r3, r5
 8005e8e:	dc2b      	bgt.n	8005ee8 <_printf_common+0xa0>
 8005e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	3b00      	subs	r3, #0
 8005e98:	bf18      	it	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	0692      	lsls	r2, r2, #26
 8005e9e:	d430      	bmi.n	8005f02 <_printf_common+0xba>
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ea8:	47c8      	blx	r9
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d023      	beq.n	8005ef6 <_printf_common+0xae>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6922      	ldr	r2, [r4, #16]
 8005eb2:	f003 0306 	and.w	r3, r3, #6
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	bf14      	ite	ne
 8005eba:	2500      	movne	r5, #0
 8005ebc:	6833      	ldreq	r3, [r6, #0]
 8005ebe:	f04f 0600 	mov.w	r6, #0
 8005ec2:	bf08      	it	eq
 8005ec4:	68e5      	ldreq	r5, [r4, #12]
 8005ec6:	f104 041a 	add.w	r4, r4, #26
 8005eca:	bf08      	it	eq
 8005ecc:	1aed      	subeq	r5, r5, r3
 8005ece:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ed2:	bf08      	it	eq
 8005ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	bfc4      	itt	gt
 8005edc:	1a9b      	subgt	r3, r3, r2
 8005ede:	18ed      	addgt	r5, r5, r3
 8005ee0:	42b5      	cmp	r5, r6
 8005ee2:	d11a      	bne.n	8005f1a <_printf_common+0xd2>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	e008      	b.n	8005efa <_printf_common+0xb2>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4652      	mov	r2, sl
 8005eec:	4641      	mov	r1, r8
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c8      	blx	r9
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d103      	bne.n	8005efe <_printf_common+0xb6>
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8005efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efe:	3501      	adds	r5, #1
 8005f00:	e7c1      	b.n	8005e86 <_printf_common+0x3e>
 8005f02:	2030      	movs	r0, #48	@ 0x30
 8005f04:	18e1      	adds	r1, r4, r3
 8005f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f10:	4422      	add	r2, r4
 8005f12:	3302      	adds	r3, #2
 8005f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f18:	e7c2      	b.n	8005ea0 <_printf_common+0x58>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4641      	mov	r1, r8
 8005f20:	4638      	mov	r0, r7
 8005f22:	47c8      	blx	r9
 8005f24:	3001      	adds	r0, #1
 8005f26:	d0e6      	beq.n	8005ef6 <_printf_common+0xae>
 8005f28:	3601      	adds	r6, #1
 8005f2a:	e7d9      	b.n	8005ee0 <_printf_common+0x98>

08005f2c <_printf_i>:
 8005f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f30:	7e0f      	ldrb	r7, [r1, #24]
 8005f32:	4691      	mov	r9, r2
 8005f34:	2f78      	cmp	r7, #120	@ 0x78
 8005f36:	4680      	mov	r8, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	469a      	mov	sl, r3
 8005f3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f42:	d807      	bhi.n	8005f54 <_printf_i+0x28>
 8005f44:	2f62      	cmp	r7, #98	@ 0x62
 8005f46:	d80a      	bhi.n	8005f5e <_printf_i+0x32>
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	f000 80d3 	beq.w	80060f4 <_printf_i+0x1c8>
 8005f4e:	2f58      	cmp	r7, #88	@ 0x58
 8005f50:	f000 80ba 	beq.w	80060c8 <_printf_i+0x19c>
 8005f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f5c:	e03a      	b.n	8005fd4 <_printf_i+0xa8>
 8005f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f62:	2b15      	cmp	r3, #21
 8005f64:	d8f6      	bhi.n	8005f54 <_printf_i+0x28>
 8005f66:	a101      	add	r1, pc, #4	@ (adr r1, 8005f6c <_printf_i+0x40>)
 8005f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f6c:	08005fc5 	.word	0x08005fc5
 8005f70:	08005fd9 	.word	0x08005fd9
 8005f74:	08005f55 	.word	0x08005f55
 8005f78:	08005f55 	.word	0x08005f55
 8005f7c:	08005f55 	.word	0x08005f55
 8005f80:	08005f55 	.word	0x08005f55
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005f55 	.word	0x08005f55
 8005f8c:	08005f55 	.word	0x08005f55
 8005f90:	08005f55 	.word	0x08005f55
 8005f94:	08005f55 	.word	0x08005f55
 8005f98:	080060db 	.word	0x080060db
 8005f9c:	08006003 	.word	0x08006003
 8005fa0:	08006095 	.word	0x08006095
 8005fa4:	08005f55 	.word	0x08005f55
 8005fa8:	08005f55 	.word	0x08005f55
 8005fac:	080060fd 	.word	0x080060fd
 8005fb0:	08005f55 	.word	0x08005f55
 8005fb4:	08006003 	.word	0x08006003
 8005fb8:	08005f55 	.word	0x08005f55
 8005fbc:	08005f55 	.word	0x08005f55
 8005fc0:	0800609d 	.word	0x0800609d
 8005fc4:	6833      	ldr	r3, [r6, #0]
 8005fc6:	1d1a      	adds	r2, r3, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6032      	str	r2, [r6, #0]
 8005fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e09e      	b.n	8006116 <_printf_i+0x1ea>
 8005fd8:	6833      	ldr	r3, [r6, #0]
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	1d19      	adds	r1, r3, #4
 8005fde:	6031      	str	r1, [r6, #0]
 8005fe0:	0606      	lsls	r6, r0, #24
 8005fe2:	d501      	bpl.n	8005fe8 <_printf_i+0xbc>
 8005fe4:	681d      	ldr	r5, [r3, #0]
 8005fe6:	e003      	b.n	8005ff0 <_printf_i+0xc4>
 8005fe8:	0645      	lsls	r5, r0, #25
 8005fea:	d5fb      	bpl.n	8005fe4 <_printf_i+0xb8>
 8005fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ff0:	2d00      	cmp	r5, #0
 8005ff2:	da03      	bge.n	8005ffc <_printf_i+0xd0>
 8005ff4:	232d      	movs	r3, #45	@ 0x2d
 8005ff6:	426d      	negs	r5, r5
 8005ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ffc:	230a      	movs	r3, #10
 8005ffe:	4859      	ldr	r0, [pc, #356]	@ (8006164 <_printf_i+0x238>)
 8006000:	e011      	b.n	8006026 <_printf_i+0xfa>
 8006002:	6821      	ldr	r1, [r4, #0]
 8006004:	6833      	ldr	r3, [r6, #0]
 8006006:	0608      	lsls	r0, r1, #24
 8006008:	f853 5b04 	ldr.w	r5, [r3], #4
 800600c:	d402      	bmi.n	8006014 <_printf_i+0xe8>
 800600e:	0649      	lsls	r1, r1, #25
 8006010:	bf48      	it	mi
 8006012:	b2ad      	uxthmi	r5, r5
 8006014:	2f6f      	cmp	r7, #111	@ 0x6f
 8006016:	6033      	str	r3, [r6, #0]
 8006018:	bf14      	ite	ne
 800601a:	230a      	movne	r3, #10
 800601c:	2308      	moveq	r3, #8
 800601e:	4851      	ldr	r0, [pc, #324]	@ (8006164 <_printf_i+0x238>)
 8006020:	2100      	movs	r1, #0
 8006022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006026:	6866      	ldr	r6, [r4, #4]
 8006028:	2e00      	cmp	r6, #0
 800602a:	bfa8      	it	ge
 800602c:	6821      	ldrge	r1, [r4, #0]
 800602e:	60a6      	str	r6, [r4, #8]
 8006030:	bfa4      	itt	ge
 8006032:	f021 0104 	bicge.w	r1, r1, #4
 8006036:	6021      	strge	r1, [r4, #0]
 8006038:	b90d      	cbnz	r5, 800603e <_printf_i+0x112>
 800603a:	2e00      	cmp	r6, #0
 800603c:	d04b      	beq.n	80060d6 <_printf_i+0x1aa>
 800603e:	4616      	mov	r6, r2
 8006040:	fbb5 f1f3 	udiv	r1, r5, r3
 8006044:	fb03 5711 	mls	r7, r3, r1, r5
 8006048:	5dc7      	ldrb	r7, [r0, r7]
 800604a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800604e:	462f      	mov	r7, r5
 8006050:	42bb      	cmp	r3, r7
 8006052:	460d      	mov	r5, r1
 8006054:	d9f4      	bls.n	8006040 <_printf_i+0x114>
 8006056:	2b08      	cmp	r3, #8
 8006058:	d10b      	bne.n	8006072 <_printf_i+0x146>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	07df      	lsls	r7, r3, #31
 800605e:	d508      	bpl.n	8006072 <_printf_i+0x146>
 8006060:	6923      	ldr	r3, [r4, #16]
 8006062:	6861      	ldr	r1, [r4, #4]
 8006064:	4299      	cmp	r1, r3
 8006066:	bfde      	ittt	le
 8006068:	2330      	movle	r3, #48	@ 0x30
 800606a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800606e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006072:	1b92      	subs	r2, r2, r6
 8006074:	6122      	str	r2, [r4, #16]
 8006076:	464b      	mov	r3, r9
 8006078:	4621      	mov	r1, r4
 800607a:	4640      	mov	r0, r8
 800607c:	f8cd a000 	str.w	sl, [sp]
 8006080:	aa03      	add	r2, sp, #12
 8006082:	f7ff fee1 	bl	8005e48 <_printf_common>
 8006086:	3001      	adds	r0, #1
 8006088:	d14a      	bne.n	8006120 <_printf_i+0x1f4>
 800608a:	f04f 30ff 	mov.w	r0, #4294967295
 800608e:	b004      	add	sp, #16
 8006090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	f043 0320 	orr.w	r3, r3, #32
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	2778      	movs	r7, #120	@ 0x78
 800609e:	4832      	ldr	r0, [pc, #200]	@ (8006168 <_printf_i+0x23c>)
 80060a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	6831      	ldr	r1, [r6, #0]
 80060a8:	061f      	lsls	r7, r3, #24
 80060aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80060ae:	d402      	bmi.n	80060b6 <_printf_i+0x18a>
 80060b0:	065f      	lsls	r7, r3, #25
 80060b2:	bf48      	it	mi
 80060b4:	b2ad      	uxthmi	r5, r5
 80060b6:	6031      	str	r1, [r6, #0]
 80060b8:	07d9      	lsls	r1, r3, #31
 80060ba:	bf44      	itt	mi
 80060bc:	f043 0320 	orrmi.w	r3, r3, #32
 80060c0:	6023      	strmi	r3, [r4, #0]
 80060c2:	b11d      	cbz	r5, 80060cc <_printf_i+0x1a0>
 80060c4:	2310      	movs	r3, #16
 80060c6:	e7ab      	b.n	8006020 <_printf_i+0xf4>
 80060c8:	4826      	ldr	r0, [pc, #152]	@ (8006164 <_printf_i+0x238>)
 80060ca:	e7e9      	b.n	80060a0 <_printf_i+0x174>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	f023 0320 	bic.w	r3, r3, #32
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	e7f6      	b.n	80060c4 <_printf_i+0x198>
 80060d6:	4616      	mov	r6, r2
 80060d8:	e7bd      	b.n	8006056 <_printf_i+0x12a>
 80060da:	6833      	ldr	r3, [r6, #0]
 80060dc:	6825      	ldr	r5, [r4, #0]
 80060de:	1d18      	adds	r0, r3, #4
 80060e0:	6961      	ldr	r1, [r4, #20]
 80060e2:	6030      	str	r0, [r6, #0]
 80060e4:	062e      	lsls	r6, r5, #24
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	d501      	bpl.n	80060ee <_printf_i+0x1c2>
 80060ea:	6019      	str	r1, [r3, #0]
 80060ec:	e002      	b.n	80060f4 <_printf_i+0x1c8>
 80060ee:	0668      	lsls	r0, r5, #25
 80060f0:	d5fb      	bpl.n	80060ea <_printf_i+0x1be>
 80060f2:	8019      	strh	r1, [r3, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	4616      	mov	r6, r2
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	e7bc      	b.n	8006076 <_printf_i+0x14a>
 80060fc:	6833      	ldr	r3, [r6, #0]
 80060fe:	2100      	movs	r1, #0
 8006100:	1d1a      	adds	r2, r3, #4
 8006102:	6032      	str	r2, [r6, #0]
 8006104:	681e      	ldr	r6, [r3, #0]
 8006106:	6862      	ldr	r2, [r4, #4]
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f859 	bl	80061c0 <memchr>
 800610e:	b108      	cbz	r0, 8006114 <_printf_i+0x1e8>
 8006110:	1b80      	subs	r0, r0, r6
 8006112:	6060      	str	r0, [r4, #4]
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	6123      	str	r3, [r4, #16]
 8006118:	2300      	movs	r3, #0
 800611a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800611e:	e7aa      	b.n	8006076 <_printf_i+0x14a>
 8006120:	4632      	mov	r2, r6
 8006122:	4649      	mov	r1, r9
 8006124:	4640      	mov	r0, r8
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	47d0      	blx	sl
 800612a:	3001      	adds	r0, #1
 800612c:	d0ad      	beq.n	800608a <_printf_i+0x15e>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	079b      	lsls	r3, r3, #30
 8006132:	d413      	bmi.n	800615c <_printf_i+0x230>
 8006134:	68e0      	ldr	r0, [r4, #12]
 8006136:	9b03      	ldr	r3, [sp, #12]
 8006138:	4298      	cmp	r0, r3
 800613a:	bfb8      	it	lt
 800613c:	4618      	movlt	r0, r3
 800613e:	e7a6      	b.n	800608e <_printf_i+0x162>
 8006140:	2301      	movs	r3, #1
 8006142:	4632      	mov	r2, r6
 8006144:	4649      	mov	r1, r9
 8006146:	4640      	mov	r0, r8
 8006148:	47d0      	blx	sl
 800614a:	3001      	adds	r0, #1
 800614c:	d09d      	beq.n	800608a <_printf_i+0x15e>
 800614e:	3501      	adds	r5, #1
 8006150:	68e3      	ldr	r3, [r4, #12]
 8006152:	9903      	ldr	r1, [sp, #12]
 8006154:	1a5b      	subs	r3, r3, r1
 8006156:	42ab      	cmp	r3, r5
 8006158:	dcf2      	bgt.n	8006140 <_printf_i+0x214>
 800615a:	e7eb      	b.n	8006134 <_printf_i+0x208>
 800615c:	2500      	movs	r5, #0
 800615e:	f104 0619 	add.w	r6, r4, #25
 8006162:	e7f5      	b.n	8006150 <_printf_i+0x224>
 8006164:	0800647d 	.word	0x0800647d
 8006168:	0800648e 	.word	0x0800648e

0800616c <memmove>:
 800616c:	4288      	cmp	r0, r1
 800616e:	b510      	push	{r4, lr}
 8006170:	eb01 0402 	add.w	r4, r1, r2
 8006174:	d902      	bls.n	800617c <memmove+0x10>
 8006176:	4284      	cmp	r4, r0
 8006178:	4623      	mov	r3, r4
 800617a:	d807      	bhi.n	800618c <memmove+0x20>
 800617c:	1e43      	subs	r3, r0, #1
 800617e:	42a1      	cmp	r1, r4
 8006180:	d008      	beq.n	8006194 <memmove+0x28>
 8006182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800618a:	e7f8      	b.n	800617e <memmove+0x12>
 800618c:	4601      	mov	r1, r0
 800618e:	4402      	add	r2, r0
 8006190:	428a      	cmp	r2, r1
 8006192:	d100      	bne.n	8006196 <memmove+0x2a>
 8006194:	bd10      	pop	{r4, pc}
 8006196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800619a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800619e:	e7f7      	b.n	8006190 <memmove+0x24>

080061a0 <_sbrk_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	2300      	movs	r3, #0
 80061a4:	4d05      	ldr	r5, [pc, #20]	@ (80061bc <_sbrk_r+0x1c>)
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	f7fa fbe8 	bl	8000980 <_sbrk>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_sbrk_r+0x1a>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_sbrk_r+0x1a>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20001eb4 	.word	0x20001eb4

080061c0 <memchr>:
 80061c0:	4603      	mov	r3, r0
 80061c2:	b510      	push	{r4, lr}
 80061c4:	b2c9      	uxtb	r1, r1
 80061c6:	4402      	add	r2, r0
 80061c8:	4293      	cmp	r3, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	d101      	bne.n	80061d2 <memchr+0x12>
 80061ce:	2000      	movs	r0, #0
 80061d0:	e003      	b.n	80061da <memchr+0x1a>
 80061d2:	7804      	ldrb	r4, [r0, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	428c      	cmp	r4, r1
 80061d8:	d1f6      	bne.n	80061c8 <memchr+0x8>
 80061da:	bd10      	pop	{r4, pc}

080061dc <_realloc_r>:
 80061dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	4680      	mov	r8, r0
 80061e2:	4615      	mov	r5, r2
 80061e4:	460c      	mov	r4, r1
 80061e6:	b921      	cbnz	r1, 80061f2 <_realloc_r+0x16>
 80061e8:	4611      	mov	r1, r2
 80061ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ee:	f7ff bc47 	b.w	8005a80 <_malloc_r>
 80061f2:	b92a      	cbnz	r2, 8006200 <_realloc_r+0x24>
 80061f4:	f7ff fbda 	bl	80059ac <_free_r>
 80061f8:	2400      	movs	r4, #0
 80061fa:	4620      	mov	r0, r4
 80061fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006200:	f000 f81a 	bl	8006238 <_malloc_usable_size_r>
 8006204:	4285      	cmp	r5, r0
 8006206:	4606      	mov	r6, r0
 8006208:	d802      	bhi.n	8006210 <_realloc_r+0x34>
 800620a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800620e:	d8f4      	bhi.n	80061fa <_realloc_r+0x1e>
 8006210:	4629      	mov	r1, r5
 8006212:	4640      	mov	r0, r8
 8006214:	f7ff fc34 	bl	8005a80 <_malloc_r>
 8006218:	4607      	mov	r7, r0
 800621a:	2800      	cmp	r0, #0
 800621c:	d0ec      	beq.n	80061f8 <_realloc_r+0x1c>
 800621e:	42b5      	cmp	r5, r6
 8006220:	462a      	mov	r2, r5
 8006222:	4621      	mov	r1, r4
 8006224:	bf28      	it	cs
 8006226:	4632      	movcs	r2, r6
 8006228:	f7ff fbb2 	bl	8005990 <memcpy>
 800622c:	4621      	mov	r1, r4
 800622e:	4640      	mov	r0, r8
 8006230:	f7ff fbbc 	bl	80059ac <_free_r>
 8006234:	463c      	mov	r4, r7
 8006236:	e7e0      	b.n	80061fa <_realloc_r+0x1e>

08006238 <_malloc_usable_size_r>:
 8006238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623c:	1f18      	subs	r0, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	bfbc      	itt	lt
 8006242:	580b      	ldrlt	r3, [r1, r0]
 8006244:	18c0      	addlt	r0, r0, r3
 8006246:	4770      	bx	lr

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
